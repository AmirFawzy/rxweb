(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@rxweb/reactive-form-validators', ['exports', '@angular/core', '@angular/forms'], factory) :
    (factory((global.rxweb = global.rxweb || {}, global.rxweb['reactive-form-validators'] = {}),global.ng.core,global.ng.forms));
}(this, (function (exports,core,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CreditCardRegex = (function () {
        function CreditCardRegex() {
            this.Visa = new RegExp('^(?:4[0-9]{12})(?:[0-9]{3})?$');
            this.AmericanExpress = new RegExp('^(?:3[47][0-9]{13})$');
            this.Maestro = new RegExp('^(?:(?:5[0678]\\d\\d|6304|6390|67\\d\\d)\\d{8,15})$');
            this.JCB = new RegExp('^(?:(?:2131|1800|35\\d{3})\\d{11})$');
            this.Discover = new RegExp('^(?:6(?:011|5[0-9]{2})(?:[0-9]{12}))$');
            this.DinersClub = new RegExp('^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$');
            this.MasterCard = new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$');
        }
        return CreditCardRegex;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ RegExRule = {
        alpha: /^[a-zA-Z]+$/,
        alphaWithSpace: /^[a-zA-Z\s]+$/,
        onlyDigit: /^[0-9]+$/,
        isDigitExits: /\d/g,
        lowerCase: /[a-z]/g,
        upperCase: /[A-Z]/g,
        specialCharacter: /[!@#$%^&*(),.?":{}|<>]/g,
        advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
        basicEmail: /^(([^<>()\[\]\\.,,:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        alphaNumeric: /^[0-9a-zA-Z]+$/,
        alphaNumericWithSpace: /^[0-9a-zA-Z\s]+$/,
        hexColor: /#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})\b/gi,
        strictHexColor: /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/i,
        float: /^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/,
        decimal: /^[-+]?([0-9]+|\.[0-9]+|[0-9]+\.[0-9]+)$/,
        hexaDecimal: /^[0-9A-F]+$/i,
        date: /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,
        time: /(00|[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/,
        url: /^^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/gm,
        creditCard: new CreditCardRegex(),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ALPHABET = "alphabet";
    var /** @type {?} */ DIGIT = "digit";
    var /** @type {?} */ CONTAINS = "contains";
    var /** @type {?} */ LOWERCASE = "lowerCase";
    var /** @type {?} */ UPPERCASE = "upperCase";
    var /** @type {?} */ SPECIAL_CHARACTER = "specialCharacter";
    var /** @type {?} */ MIN_LENGTH = "minLength";
    var /** @type {?} */ MAX_LENGTH = "maxLength";
    var RegexValidator = (function () {
        function RegexValidator() {
        }
        /**
         * @param {?} value
         * @param {?} regex
         * @return {?}
         */
        RegexValidator.isExits = /**
         * @param {?} value
         * @param {?} regex
         * @return {?}
         */
            function (value, regex) {
                return value.match(regex) != null;
            };
        /**
         * @param {?} value
         * @param {?} regex
         * @return {?}
         */
        RegexValidator.isValid = /**
         * @param {?} value
         * @param {?} regex
         * @return {?}
         */
            function (value, regex) {
                return regex.test(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RegexValidator.isNotBlank = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value != undefined && value != "" && value != null;
            };
        /**
         * @param {?} passwordValidation
         * @param {?} value
         * @return {?}
         */
        RegexValidator.isValidPassword = /**
         * @param {?} passwordValidation
         * @param {?} value
         * @return {?}
         */
            function (passwordValidation, value) {
                var /** @type {?} */ isValid = false;
                var /** @type {?} */ keyName = "status";
                var /** @type {?} */ objectProperties = Object.getOwnPropertyNames(passwordValidation);
                try {
                    for (var objectProperties_1 = __values(objectProperties), objectProperties_1_1 = objectProperties_1.next(); !objectProperties_1_1.done; objectProperties_1_1 = objectProperties_1.next()) {
                        var propertyName = objectProperties_1_1.value;
                        switch (propertyName) {
                            case ALPHABET:
                                isValid = RegexValidator.isExits(value, RegExRule["alpha"]);
                                keyName = ALPHABET;
                                break;
                            case DIGIT:
                                isValid = RegexValidator.isValid(value, RegExRule["isDigitExits"]);
                                keyName = DIGIT;
                                break;
                            case CONTAINS:
                                isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                                keyName = CONTAINS;
                                break;
                            case LOWERCASE:
                                isValid = RegexValidator.isValid(value, RegExRule["lowerCase"]);
                                keyName = LOWERCASE;
                                break;
                            case UPPERCASE:
                                isValid = RegexValidator.isValid(value, RegExRule["upperCase"]);
                                keyName = UPPERCASE;
                                break;
                            case SPECIAL_CHARACTER:
                                isValid = RegexValidator.isExits(value, RegExRule["specialCharacter"]);
                                keyName = SPECIAL_CHARACTER;
                                break;
                            case MIN_LENGTH:
                                isValid = value.length >= passwordValidation[propertyName];
                                keyName = MIN_LENGTH;
                                break;
                            case MAX_LENGTH:
                                isValid = value.length <= passwordValidation[propertyName];
                                keyName = MAX_LENGTH;
                                break;
                        }
                        if (!isValid)
                            break;
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (objectProperties_1_1 && !objectProperties_1_1.done && (_a = objectProperties_1.return))
                            _a.call(objectProperties_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return { isValid: isValid, keyName: keyName };
                var e_1, _a;
            };
        return RegexValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ReactiveFormConfig = (function () {
        function ReactiveFormConfig() {
        }
        /**
         * @param {?} jObject
         * @return {?}
         */
        ReactiveFormConfig.set = /**
         * @param {?} jObject
         * @return {?}
         */
            function (jObject) {
                if (jObject)
                    ReactiveFormConfig.json = jObject;
            };
        ReactiveFormConfig.json = {};
        return ReactiveFormConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ObjectMaker = (function () {
        function ObjectMaker() {
        }
        /**
         * @param {?} key
         * @param {?} message
         * @param {?} values
         * @return {?}
         */
        ObjectMaker.toJson = /**
         * @param {?} key
         * @param {?} message
         * @param {?} values
         * @return {?}
         */
            function (key, message, values) {
                var /** @type {?} */ messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json["validationMessage"] && ReactiveFormConfig.json["validationMessage"][key]) ? ReactiveFormConfig.json["validationMessage"][key] : '';
                values.forEach(function (t, index) {
                    messageText = messageText.replace("{{" + index + "}}", t);
                });
                var /** @type {?} */ jObject = {};
                jObject[key] = {
                    message: messageText, refValues: values
                };
                return jObject;
            };
        /**
         * @return {?}
         */
        ObjectMaker.null = /**
         * @return {?}
         */
            function () {
                return null;
            };
        return ObjectMaker;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Linq = (function () {
        function Linq() {
        }
        /**
         * @param {?} expression
         * @return {?}
         */
        Linq.functionCreator = /**
         * @param {?} expression
         * @return {?}
         */
            function (expression) {
                var /** @type {?} */ functionSetter = [];
                var /** @type {?} */ match = expression.match(/^\s*\(?\s*([^)]*)\s*\)?\s*=>(.*)/);
                var /** @type {?} */ splitSelect = match[2].split(",");
                for (var /** @type {?} */ i = 0; i < splitSelect.length; i++) {
                    var /** @type {?} */ equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*==(.*)/);
                    if (equalToOperator !== null) {
                        functionSetter = new Function(match[1], "return " + equalToOperator[0]);
                    }
                    else {
                        equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*=(.*)/);
                        if (equalToOperator === null) {
                            functionSetter = new Function(match[1], "return " + splitSelect[i]);
                        }
                        else {
                            functionSetter = new Function(match[1], "return " + equalToOperator[2]);
                        }
                    }
                }
                if (splitSelect.length == 0)
                    functionSetter = { accessFunction: new Function(match[1], "return " + match[2]) };
                return functionSetter;
            };
        /**
         * @param {?} jObject
         * @param {?} expression
         * @param {?} parentObject
         * @return {?}
         */
        Linq.IsPassed = /**
         * @param {?} jObject
         * @param {?} expression
         * @param {?} parentObject
         * @return {?}
         */
            function (jObject, expression, parentObject) {
                var /** @type {?} */ expressionFunction = expression;
                if (parentObject && typeof expression == "string")
                    expressionFunction = Linq.functionCreator(expression);
                if (parentObject && expressionFunction)
                    return expressionFunction(parentObject, jObject);
                return true;
            };
        /**
         * @param {?} expression
         * @return {?}
         */
        Linq.expressionColumns = /**
         * @param {?} expression
         * @return {?}
         */
            function (expression) {
                var /** @type {?} */ columns = [];
                var /** @type {?} */ splitExpressions = [];
                if (typeof expression == "string")
                    expression.split("=>")[1].split(" && ").forEach(function (t) {
                        t.split(" || ").forEach(function (x) {
                            splitExpressions.push(x.trim().split(' ')[0]);
                        });
                    });
                else
                    String(expression).split(" return ")[1].split(" && ").forEach(function (t) {
                        t.split(" || ").forEach(function (x) {
                            splitExpressions.push(x.trim().split(' ')[0]);
                        });
                    });
                splitExpressions.forEach(function (t) {
                    var /** @type {?} */ splitText = t.split('.');
                    if (splitText.length == 2)
                        columns.push({ propName: splitText[1].trim() });
                    else {
                        var /** @type {?} */ arrayProp = splitText[1].split('[');
                        var /** @type {?} */ jObject = {
                            propName: splitText[splitText.length - 1].trim(),
                            objectPropName: arrayProp[0],
                            arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined
                        };
                        columns.push(jObject);
                    }
                });
                return columns;
            };
        return Linq;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ApplicationUtil = (function () {
        function ApplicationUtil() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        ApplicationUtil.getParentObjectValue = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.parent) {
                    var /** @type {?} */ parent_1 = this.parentObjectValue(control.parent);
                    return parent_1.value;
                }
                return {};
            };
        /**
         * @param {?} control
         * @return {?}
         */
        ApplicationUtil.parentObjectValue = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (!control.parent)
                    return control;
                else
                    control = this.parentObjectValue(control.parent);
                return control;
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ApplicationUtil.getConfigObject = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return (config != undefined && config != true) ? config : {};
            };
        return ApplicationUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ AnnotationTypes = {
        numeric: 'numeric',
        required: 'required',
        minLength: 'minLength',
        maxLength: 'maxLength',
        minNumber: 'minNumber',
        maxNumber: 'maxNumber',
        pattern: 'pattern',
        password: 'password',
        compare: 'compare',
        minDate: 'minDate',
        maxDate: 'maxDate',
        alpha: 'alpha',
        alphaNumeric: 'alphaNumeric',
        email: 'email',
        hexColor: 'hexColor',
        lowerCase: 'lowerCase',
        url: 'url',
        upperCase: 'upperCase',
        nested: 'nested',
        propArray: 'propArray',
        propObject: 'propObject',
        contains: 'contains',
        range: 'range',
        custom: 'custom',
        digit: "digit",
        creditCard: "creditCard",
        time: "time",
        json: "json",
        greaterThan: "greaterThan",
        greaterThanEqualTo: "greaterThanEqualTo",
        lessThan: "lessThan",
        lessThanEqualTo: "lessThanEqualTo"
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} conditionalValidationProps
     * @return {?}
     */
    function alphaValidator(config, conditionalValidationProps) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    var /** @type {?} */ testResult = false;
                    if (!config.allowWhiteSpace)
                        testResult = RegexValidator.isValid(controlValue, RegExRule["alpha"]);
                    else
                        testResult = RegexValidator.isValid(controlValue, RegExRule["alphaWithSpace"]);
                    if (!testResult)
                        return ObjectMaker.toJson(AnnotationTypes["alpha"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function alphaNumericValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    var /** @type {?} */ testResult = true;
                    if (!config.allowWhiteSpace)
                        testResult = RegexValidator.isValid(controlValue, RegExRule["alphaNumeric"]);
                    else
                        testResult = RegexValidator.isValid(controlValue, RegExRule["alphaNumericWithSpace"]);
                    if (!testResult)
                        return ObjectMaker.toJson(AnnotationTypes["alphaNumeric"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function compareValidator(config) {
        return function (control) {
            var /** @type {?} */ compareControl = control.root.get([config.fieldName]);
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ compareControlValue = (compareControl) ? compareControl.value : '';
            if (RegexValidator.isNotBlank(controlValue)) {
                if (!(compareControl && compareControl.value === controlValue))
                    return ObjectMaker.toJson(AnnotationTypes["compare"], config.message || null, [controlValue, compareControlValue]);
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function containsValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (controlValue.indexOf(config.value) == -1)
                        return ObjectMaker.toJson(AnnotationTypes["contains"], config.message || null, [config.value, controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var CreditCardType = {
        Visa: 1,
        AmericanExpress: 2,
        Maestro: 3,
        JCB: 4,
        Discover: 5,
        DinersClub: 6,
        MasterCard: 7,
    };
    CreditCardType[CreditCardType.Visa] = "Visa";
    CreditCardType[CreditCardType.AmericanExpress] = "AmericanExpress";
    CreditCardType[CreditCardType.Maestro] = "Maestro";
    CreditCardType[CreditCardType.JCB] = "JCB";
    CreditCardType[CreditCardType.Discover] = "Discover";
    CreditCardType[CreditCardType.DinersClub] = "DinersClub";
    CreditCardType[CreditCardType.MasterCard] = "MasterCard";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function creditCardValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    var /** @type {?} */ isValid = false;
                    try {
                        for (var _a = __values(config.creditCardTypes), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var creditCardType = _b.value;
                            switch (creditCardType) {
                                case CreditCardType.AmericanExpress:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].AmericanExpress);
                                    break;
                                case CreditCardType.DinersClub:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].DinersClub);
                                    break;
                                case CreditCardType.Discover:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].Discover);
                                    break;
                                case CreditCardType.JCB:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].JCB);
                                    break;
                                case CreditCardType.Maestro:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].Maestro);
                                    break;
                                case CreditCardType.MasterCard:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].MasterCard);
                                    break;
                                case CreditCardType.Visa:
                                    isValid = RegexValidator.isValid(controlValue, RegExRule["creditCard"].Visa);
                                    break;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    if (!isValid)
                        return ObjectMaker.toJson(AnnotationTypes["creditCard"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
            var e_1, _c;
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function digitValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!RegexValidator.isValid(controlValue, RegExRule["onlyDigit"]))
                        return ObjectMaker.toJson(AnnotationTypes["digit"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function emailValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!RegexValidator.isValid(controlValue, RegExRule["basicEmail"]))
                        return ObjectMaker.toJson(AnnotationTypes["email"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function hexColorValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    var /** @type {?} */ hexRegex = config.isStrict ? RegExRule["strictHexColor"] : RegExRule["hexColor"];
                    if (!RegexValidator.isValid(controlValue, hexRegex))
                        return ObjectMaker.toJson(AnnotationTypes["hexColor"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function lowercaseValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(controlValue === controlValue.toLowerCase()))
                        return ObjectMaker.toJson(AnnotationTypes["lowerCase"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxDateValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (RegexValidator.isValid(controlValue, RegExRule["date"])) {
                        var /** @type {?} */ maxDate = config.value;
                        if (!(function (maxDate) { return controlValue; }))
                            return ObjectMaker.toJson(AnnotationTypes["maxDate"], config.message || null, [control.value]);
                    }
                    else
                        return ObjectMaker.toJson(AnnotationTypes["maxDate"], config.message || null, [control.value]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxLengthValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(controlValue.length <= config.value))
                        return ObjectMaker.toJson(AnnotationTypes["maxLength"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxNumberValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(parseFloat(controlValue) <= config.value))
                        return ObjectMaker.toJson(AnnotationTypes["maxNumber"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minDateValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (RegexValidator.isValid(controlValue, RegExRule["date"])) {
                        var /** @type {?} */ minDate = new Date(config.value);
                        var /** @type {?} */ currentControlValue = new Date(controlValue);
                        if (!(currentControlValue >= minDate))
                            return ObjectMaker.toJson(AnnotationTypes["minDate"], config.message || null, [control.value]);
                    }
                    else
                        return ObjectMaker.toJson(AnnotationTypes["minDate"], config.message || null, [control.value]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minLengthValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(String(controlValue).length >= config.value))
                        return ObjectMaker.toJson(AnnotationTypes["minLength"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minNumberValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(parseFloat(controlValue) >= config.value))
                        return ObjectMaker.toJson(AnnotationTypes["minNumber"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function passwordValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            if (RegexValidator.isNotBlank(controlValue)) {
                var /** @type {?} */ validation = RegexValidator.isValidPassword(config.validation, controlValue);
                if (!validation["isValid"])
                    return ObjectMaker.toJson(validation["keyName"], config.message || null, [controlValue]);
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function rangeValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(String(controlValue).indexOf(".") == -1 && parseInt(controlValue) >= config.minimumNumber && parseInt(controlValue) <= config.maximumNumber))
                        return ObjectMaker.toJson(AnnotationTypes["range"], config.message || null, [config.minimumNumber, config.maximumNumber, controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function uppercaseValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!(controlValue === controlValue.toUpperCase()))
                        return ObjectMaker.toJson(AnnotationTypes["upperCase"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function requiredValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (!RegexValidator.isNotBlank(controlValue)) {
                    return ObjectMaker.toJson(AnnotationTypes["required"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function patternValidator(config) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    for (var /** @type {?} */ pattern in config.pattern)
                        if (!(RegexValidator.isValid(controlValue, config.pattern[pattern])))
                            return ObjectMaker.toJson(pattern, config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} conditionalValidationProps
     * @return {?}
     */
    function timeValidator(config, conditionalValidationProps) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    var /** @type {?} */ testResult = false;
                    var /** @type {?} */ valueLength = 5;
                    if (!config.allowSeconds)
                        valueLength = 8;
                    testResult = RegexValidator.isValid(controlValue, RegExRule["time"]) && controlValue.length == valueLength;
                    if (!testResult)
                        return ObjectMaker.toJson(AnnotationTypes["time"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} conditionalValidationProps
     * @return {?}
     */
    function urlValidator(config, conditionalValidationProps) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    if (!RegexValidator.isValid(controlValue, RegExRule["url"]))
                        return ObjectMaker.toJson(AnnotationTypes["url"], config.message || null, [controlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @param {?} conditionalValidationProps
     * @return {?}
     */
    function jsonValidator(config, conditionalValidationProps) {
        return function (control) {
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            config = ApplicationUtil.getConfigObject(config);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue)) {
                    try {
                        var /** @type {?} */ json = JSON.parse(controlValue);
                    }
                    catch (ex) {
                        return ObjectMaker.toJson(AnnotationTypes["json"], config.message || null, [controlValue]);
                    }
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function greaterThanValidator(config) {
        return function (control) {
            var /** @type {?} */ matchControl = control.root.get([config.fieldName]);
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ matchControlValue = (matchControl) ? matchControl.value : '';
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if (RegexValidator.isNotBlank(controlValue) && RegexValidator.isNotBlank(matchControlValue)) {
                    if (!(matchControl && parseFloat(controlValue) > parseFloat(matchControlValue)))
                        return ObjectMaker.toJson(AnnotationTypes["greaterThan"], config.message || null, [controlValue, matchControlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function greaterThanEqualToValidator(config) {
        return function (control) {
            var /** @type {?} */ matchControl = control.root.get([config.fieldName]);
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ matchControlValue = (matchControl) ? matchControl.value : '';
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if ((RegexValidator.isNotBlank(controlValue) && RegexValidator.isNotBlank(matchControlValue))) {
                    if (!(matchControl && parseFloat(controlValue) >= parseFloat(matchControlValue)))
                        return ObjectMaker.toJson(AnnotationTypes["greaterThanEqualTo"], config.message || null, [controlValue, matchControlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function lessThanEqualToValidator(config) {
        return function (control) {
            var /** @type {?} */ matchControl = control.root.get([config.fieldName]);
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ matchControlValue = (matchControl) ? matchControl.value : '';
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if ((RegexValidator.isNotBlank(controlValue) && RegexValidator.isNotBlank(matchControlValue))) {
                    if (!(matchControl && parseFloat(controlValue) <= parseFloat(matchControlValue)))
                        return ObjectMaker.toJson(AnnotationTypes["lessThanEqualTo"], config.message || null, [controlValue, matchControlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function lessThanValidator(config) {
        return function (control) {
            var /** @type {?} */ matchControl = control.root.get([config.fieldName]);
            var /** @type {?} */ controlValue = control.value;
            var /** @type {?} */ matchControlValue = (matchControl) ? matchControl.value : '';
            var /** @type {?} */ formGroupValue = ApplicationUtil.getParentObjectValue(control);
            var /** @type {?} */ parentObject = (control.parent) ? control.parent.value : undefined;
            if (Linq.IsPassed(formGroupValue, config.conditionalExpressions, parentObject)) {
                if ((RegexValidator.isNotBlank(controlValue) && RegexValidator.isNotBlank(matchControlValue))) {
                    if (!(matchControl && parseFloat(controlValue) < parseFloat(matchControlValue)))
                        return ObjectMaker.toJson(AnnotationTypes["lessThan"], config.message || null, [controlValue, matchControlValue]);
                }
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ PROPERTY = "property";
    var /** @type {?} */ OBJECT_PROPERTY = "objectProperty";
    var /** @type {?} */ ARRAY_PROPERTY = "arrayProperty";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ defaultContainer = new ((function () {
        function class_1() {
            this.instances = [];
        }
        /**
         * @template T
         * @param {?} instanceFunc
         * @return {?}
         */
        class_1.prototype.get = /**
         * @template T
         * @param {?} instanceFunc
         * @return {?}
         */
            function (instanceFunc) {
                var /** @type {?} */ instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
                return instance;
            };
        /**
         * @param {?} instanceFunc
         * @return {?}
         */
        class_1.prototype.addInstanceContainer = /**
         * @param {?} instanceFunc
         * @return {?}
         */
            function (instanceFunc) {
                var /** @type {?} */ instanceContainer = {
                    instance: instanceFunc,
                    propertyAnnotations: [],
                    properties: []
                };
                this.instances.push(instanceContainer);
                return instanceContainer;
            };
        /**
         * @param {?} instanceFunc
         * @param {?} propertyInfo
         * @return {?}
         */
        class_1.prototype.addProperty = /**
         * @param {?} instanceFunc
         * @param {?} propertyInfo
         * @return {?}
         */
            function (instanceFunc, propertyInfo) {
                var /** @type {?} */ instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
                if (instance) {
                    this.addPropertyInfo(instance, propertyInfo);
                }
                else {
                    instance = this.addInstanceContainer(instanceFunc);
                    this.addPropertyInfo(instance, propertyInfo);
                }
            };
        /**
         * @param {?} instance
         * @param {?} propertyInfo
         * @return {?}
         */
        class_1.prototype.addPropertyInfo = /**
         * @param {?} instance
         * @param {?} propertyInfo
         * @return {?}
         */
            function (instance, propertyInfo) {
                var /** @type {?} */ property = instance.properties.filter(function (t) { return t.name == propertyInfo.name; })[0];
                if (!property)
                    instance.properties.push(propertyInfo);
            };
        /**
         * @param {?} instanceFunc
         * @param {?} decoratorConfiguration
         * @return {?}
         */
        class_1.prototype.addAnnotation = /**
         * @param {?} instanceFunc
         * @param {?} decoratorConfiguration
         * @return {?}
         */
            function (instanceFunc, decoratorConfiguration) {
                this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName });
                var /** @type {?} */ instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
                if (instance)
                    instance.propertyAnnotations.push(decoratorConfiguration);
                else {
                    instance = this.addInstanceContainer(instanceFunc);
                    instance.propertyAnnotations.push(decoratorConfiguration);
                }
                if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpressions) {
                    var /** @type {?} */ columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpressions);
                    this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
                }
                if (instance && decoratorConfiguration.config && (decoratorConfiguration.annotationType == AnnotationTypes["compare"] || decoratorConfiguration.annotationType == AnnotationTypes["greaterThan"] || decoratorConfiguration.annotationType == AnnotationTypes["greaterThanEqualTo"] || decoratorConfiguration.annotationType == AnnotationTypes["lessThan"] || decoratorConfiguration.annotationType == AnnotationTypes["lessThanEqualTo"])) {
                    this.setConditionalValueProp(instance, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);
                }
            };
        /**
         * @param {?} instance
         * @param {?} propName
         * @param {?} refPropName
         * @return {?}
         */
        class_1.prototype.setConditionalValueProp = /**
         * @param {?} instance
         * @param {?} propName
         * @param {?} refPropName
         * @return {?}
         */
            function (instance, propName, refPropName) {
                if (!instance.conditionalValidationProps)
                    instance.conditionalValidationProps = {};
                if (!instance.conditionalValidationProps[propName])
                    instance.conditionalValidationProps[propName] = [];
                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)
                    instance.conditionalValidationProps[propName].push(refPropName);
            };
        /**
         * @param {?} instance
         * @param {?} propertyName
         * @param {?} columns
         * @return {?}
         */
        class_1.prototype.addChangeValidation = /**
         * @param {?} instance
         * @param {?} propertyName
         * @param {?} columns
         * @return {?}
         */
            function (instance, propertyName, columns) {
                if (instance) {
                    if (!instance.conditionalValidationProps)
                        instance.conditionalValidationProps = {};
                    columns.forEach(function (t) {
                        if (t.propName && !t.objectPropName) {
                            if (!instance.conditionalValidationProps[t.propName])
                                instance.conditionalValidationProps[t.propName] = [];
                            if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)
                                instance.conditionalValidationProps[t.propName].push(propertyName);
                        }
                        else {
                            if (t.propName && t.objectPropName) {
                                if (!instance.conditionalObjectProps)
                                    instance.conditionalObjectProps = [];
                                t.referencePropName = propertyName;
                                instance.conditionalObjectProps["push"](t);
                            }
                        }
                    });
                }
            };
        return class_1;
    }()))();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormBuilderConfiguration = (function () {
        function FormBuilderConfiguration(formBuilderConfiguration) {
            if (formBuilderConfiguration)
                for (var /** @type {?} */ column in formBuilderConfiguration)
                    this[column] = formBuilderConfiguration[column];
        }
        return FormBuilderConfiguration;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} conditionalValidationProps
     * @return {?}
     */
    function conditionalChangeValidator(conditionalValidationProps) {
        var /** @type {?} */ setTimeOut = function (control) {
            var /** @type {?} */ timeOut = window.setTimeout(function (t) {
                window.clearTimeout(timeOut);
                control.updateValueAndValidity();
            }, 100);
        };
        return function (control) {
            var /** @type {?} */ parentFormGroup = control.parent;
            if (parentFormGroup) {
                conditionalValidationProps.forEach(function (t) {
                    if (t.indexOf("[]") != -1) {
                        var /** @type {?} */ splitText = t.split("[]");
                        var /** @type {?} */ formArray = (parentFormGroup.get([splitText[0]]));
                        formArray.controls.forEach(function (formGroup) {
                            var /** @type {?} */ abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                    }
                    else {
                        var /** @type {?} */ control = parentFormGroup.get([t]);
                        if (!control)
                            control = parentFormGroup.root.get([t]);
                        if (control) {
                            setTimeOut(control);
                        }
                    }
                });
            }
            return ObjectMaker.null();
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ APP_VALIDATORS = {
        "alphaNumeric": alphaNumericValidator,
        "alpha": alphaValidator,
        "compare": compareValidator,
        "email": emailValidator,
        "hexColor": hexColorValidator,
        "lowerCase": lowercaseValidator,
        "maxDate": maxDateValidator,
        "maxNumber": maxNumberValidator,
        "minDate": minDateValidator,
        "minNumber": minNumberValidator,
        "contains": containsValidator,
        "upperCase": uppercaseValidator,
        "maxLength": maxLengthValidator,
        "minLength": minLengthValidator,
        "password": passwordValidator,
        "range": rangeValidator,
        "required": requiredValidator,
        "creditCard": creditCardValidator,
        "digit": digitValidator,
        "pattern": patternValidator,
        "time": timeValidator,
        "url": urlValidator,
        "json": jsonValidator,
        "greaterThan": greaterThanValidator,
        "greaterThanEqualTo": greaterThanEqualToValidator,
        "lessThan": lessThanValidator,
        "lessThanEqualTo": lessThanEqualToValidator
    };
    var RxFormBuilder = (function () {
        function RxFormBuilder(formBuilder) {
            this.formBuilder = formBuilder;
            this.conditionalObjectProps = [];
            this.conditionalValidationInstance = {};
            this.builderConfigurationConditionalObjectProps = [];
            this.isNested = false;
        }
        /**
         * @param {?} instanceFunc
         * @return {?}
         */
        RxFormBuilder.prototype.getInstanceContainer = /**
         * @param {?} instanceFunc
         * @return {?}
         */
            function (instanceFunc) {
                return defaultContainer.get(instanceFunc);
            };
        /**
         * @param {?} formGroup
         * @param {?} object
         * @return {?}
         */
        RxFormBuilder.prototype.setValue = /**
         * @param {?} formGroup
         * @param {?} object
         * @return {?}
         */
            function (formGroup, object) {
                for (var /** @type {?} */ col in object) {
                    var /** @type {?} */ control = formGroup.get([col]);
                    control.setValue(object[col]);
                    control.updateValueAndValidity();
                }
            };
        /**
         * @param {?} fomrBuilderConfiguration
         * @return {?}
         */
        RxFormBuilder.prototype.extractExpressions = /**
         * @param {?} fomrBuilderConfiguration
         * @return {?}
         */
            function (fomrBuilderConfiguration) {
                if (fomrBuilderConfiguration && fomrBuilderConfiguration.validations) {
                    for (var /** @type {?} */ property in fomrBuilderConfiguration.validations) {
                        for (var /** @type {?} */ decorator in fomrBuilderConfiguration.validations[property]) {
                            if (fomrBuilderConfiguration.validations[property][decorator].conditionalExpressions) {
                                var /** @type {?} */ columns = Linq.expressionColumns(fomrBuilderConfiguration.validations[property][decorator].conditionalExpressions);
                                defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);
                            }
                        }
                    }
                }
                return null;
            };
        /**
         * @param {?} property
         * @param {?} propertyValidators
         * @param {?} propValidationConfig
         * @param {?} instance
         * @return {?}
         */
        RxFormBuilder.prototype.addFormControl = /**
         * @param {?} property
         * @param {?} propertyValidators
         * @param {?} propValidationConfig
         * @param {?} instance
         * @return {?}
         */
            function (property, propertyValidators, propValidationConfig, instance) {
                var /** @type {?} */ validators = [];
                var /** @type {?} */ columns = [];
                if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) || (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])) {
                    var /** @type {?} */ props_1 = [];
                    if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]))
                        instance.conditionalValidationProps[property.name].forEach(function (t) { return props_1.push(t); });
                    if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])
                        this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(function (t) { return props_1.push(t); });
                    validators.push(conditionalChangeValidator(props_1));
                }
                if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {
                    var /** @type {?} */ propConditions_1 = [];
                    if (this.conditionalObjectProps)
                        propConditions_1 = this.conditionalObjectProps.filter(function (t) { return t.propName == property.name; });
                    if (this.builderConfigurationConditionalObjectProps)
                        this.builderConfigurationConditionalObjectProps.filter(function (t) { return t.propName == property.name; }).forEach(function (t) { return propConditions_1.push(t); });
                    propConditions_1.forEach(function (t) {
                        if (t.referencePropName && columns.indexOf(t.referencePropName) == -1)
                            columns.push(t.referencePropName);
                    });
                    if (columns.length > 0)
                        validators.push(conditionalChangeValidator(columns));
                }
                try {
                    for (var propertyValidators_1 = __values(propertyValidators), propertyValidators_1_1 = propertyValidators_1.next(); !propertyValidators_1_1.done; propertyValidators_1_1 = propertyValidators_1.next()) {
                        var propertyValidator = propertyValidators_1_1.value;
                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](propertyValidator.config));
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (propertyValidators_1_1 && !propertyValidators_1_1.done && (_a = propertyValidators_1.return))
                            _a.call(propertyValidators_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                if (propValidationConfig)
                    this.additionalValidation(validators, propValidationConfig);
                return validators;
                var e_1, _a;
            };
        /**
         * @param {?} validations
         * @param {?} propValidationConfig
         * @return {?}
         */
        RxFormBuilder.prototype.additionalValidation = /**
         * @param {?} validations
         * @param {?} propValidationConfig
         * @return {?}
         */
            function (validations, propValidationConfig) {
                for (var /** @type {?} */ col in AnnotationTypes) {
                    if (propValidationConfig[AnnotationTypes[col]] && col != "custom") {
                        validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));
                    }
                    else if (col == AnnotationTypes["custom"] && propValidationConfig[AnnotationTypes[col]])
                        validations.push(propValidationConfig[col]);
                }
            };
        /**
         * @template T
         * @param {?} instanceContainer
         * @param {?} object
         * @return {?}
         */
        RxFormBuilder.prototype.checkObjectPropAdditionalValidation = /**
         * @template T
         * @param {?} instanceContainer
         * @param {?} object
         * @return {?}
         */
            function (instanceContainer, object) {
                var _this = this;
                var /** @type {?} */ props = instanceContainer.properties.filter(function (t) { return t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY; });
                props.forEach(function (t) {
                    var /** @type {?} */ instance = _this.getInstanceContainer(t.entity);
                    if (instance.conditionalValidationProps) {
                        for (var /** @type {?} */ key in instance.conditionalValidationProps) {
                            var /** @type {?} */ prop = instance.properties.filter(function (t) { return t.name == key; })[0];
                            if (!prop)
                                prop = instanceContainer.properties.filter(function (t) { return t.name == key; })[0];
                            if (prop) {
                                if (!instanceContainer.conditionalValidationProps)
                                    if (!instanceContainer.conditionalValidationProps[key])
                                        instanceContainer.conditionalValidationProps[key] = [];
                                instance.conditionalValidationProps[key].forEach(function (x) {
                                    if (t.propertyType != ARRAY_PROPERTY)
                                        instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));
                                    else
                                        instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));
                                });
                            }
                        }
                    }
                });
            };
        /**
         * @param {?} model
         * @param {?=} entityObject
         * @param {?=} formBuilderConfiguration
         * @return {?}
         */
        RxFormBuilder.prototype.getObject = /**
         * @param {?} model
         * @param {?=} entityObject
         * @param {?=} formBuilderConfiguration
         * @return {?}
         */
            function (model, entityObject, formBuilderConfiguration) {
                var /** @type {?} */ json = {};
                if (typeof model == "function")
                    json["model"] = model;
                if (entityObject && !(entityObject instanceof FormBuilderConfiguration))
                    json["entityObject"] = entityObject;
                if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration)
                    json["formBuilderConfiguration"] = entityObject;
                else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration)
                    json["formBuilderConfiguration"] = formBuilderConfiguration;
                if (!entityObject) {
                    json["entityObject"] = model;
                    if (typeof model == "object")
                        json["model"] = model.constructor;
                }
                else if (model && (entityObject instanceof FormBuilderConfiguration) && (typeof model == "object")) {
                    json["entityObject"] = model;
                    json["model"] = model.constructor;
                }
                return json;
            };
        /**
         * @template T
         * @param {?} model
         * @param {?=} entityObject
         * @param {?=} formBuilderConfiguration
         * @return {?}
         */
        RxFormBuilder.prototype.formGroup = /**
         * @template T
         * @param {?} model
         * @param {?=} entityObject
         * @param {?=} formBuilderConfiguration
         * @return {?}
         */
            function (model, entityObject, formBuilderConfiguration) {
                var _this = this;
                var /** @type {?} */ json = this.getObject(model, entityObject, formBuilderConfiguration);
                model = json["model"];
                entityObject = json["entityObject"];
                formBuilderConfiguration = json["formBuilderConfiguration"];
                if (formBuilderConfiguration)
                    this.extractExpressions(formBuilderConfiguration);
                var /** @type {?} */ instanceContainer = this.getInstanceContainer(model);
                this.checkObjectPropAdditionalValidation(instanceContainer, entityObject);
                var /** @type {?} */ formGroupObject = {};
                var /** @type {?} */ additionalValidations = {};
                instanceContainer.properties.forEach(function (property) {
                    var /** @type {?} */ isIncludeProp = true;
                    if (formBuilderConfiguration && formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0)
                        isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;
                    if (formBuilderConfiguration && formBuilderConfiguration.validations)
                        additionalValidations = formBuilderConfiguration.validations;
                    if (isIncludeProp) {
                        switch (property.propertyType) {
                            case PROPERTY:
                                var /** @type {?} */ propertyValidators = instanceContainer.propertyAnnotations.filter(function (t) { return t.propertyName == property.name; });
                                formGroupObject[property.name] = [entityObject[property.name], _this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer)];
                                _this.isNested = false;
                                break;
                            case OBJECT_PROPERTY:
                                if (entityObject[property.name] && entityObject[property.name] instanceof Object) {
                                    _this.isNested = true;
                                    if (instanceContainer && instanceContainer.conditionalObjectProps)
                                        _this.conditionalObjectProps = instanceContainer.conditionalObjectProps["filter"](function (t) { return t.objectPropName == property.name; });
                                    if (_this.conditionalValidationInstance && _this.conditionalValidationInstance.conditionalObjectProps)
                                        _this.builderConfigurationConditionalObjectProps = _this.conditionalValidationInstance.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name; });
                                    formGroupObject[property.name] = _this.formGroup(property.entity, entityObject[property.name], formBuilderConfiguration);
                                    _this.conditionalObjectProps = [];
                                    _this.builderConfigurationConditionalObjectProps = [];
                                    _this.isNested = false;
                                }
                                break;
                            case ARRAY_PROPERTY:
                                if (entityObject[property.name] && entityObject[property.name] instanceof Array) {
                                    _this.isNested = true;
                                    var /** @type {?} */ formArrayGroup = [];
                                    var /** @type {?} */ index_1 = 0;
                                    try {
                                        for (var _a = __values(entityObject[property.name]), _b = _a.next(); !_b.done; _b = _a.next()) {
                                            var subObject = _b.value;
                                            if (instanceContainer && instanceContainer.conditionalObjectProps)
                                                _this.conditionalObjectProps = instanceContainer.conditionalObjectProps["filter"](function (t) { return t.objectPropName == property.name && t.arrayIndex == index_1; });
                                            if (_this.conditionalValidationInstance && _this.conditionalValidationInstance.conditionalObjectProps)
                                                _this.builderConfigurationConditionalObjectProps = _this.conditionalValidationInstance.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name && t.arrayIndex == index_1; });
                                            formArrayGroup.push(_this.formGroup(property.entity, subObject, formBuilderConfiguration));
                                            index_1++;
                                            _this.conditionalObjectProps = [];
                                            _this.builderConfigurationConditionalObjectProps = [];
                                        }
                                    }
                                    catch (e_2_1) {
                                        e_2 = { error: e_2_1 };
                                    }
                                    finally {
                                        try {
                                            if (_b && !_b.done && (_c = _a.return))
                                                _c.call(_a);
                                        }
                                        finally {
                                            if (e_2)
                                                throw e_2.error;
                                        }
                                    }
                                    formGroupObject[property.name] = _this.formBuilder.array(formArrayGroup);
                                    _this.isNested = false;
                                }
                                break;
                        }
                    }
                    var e_2, _c;
                });
                if (!this.isNested) {
                    this.conditionalValidationInstance = {};
                    this.builderConfigurationConditionalObjectProps = [];
                }
                return this.formBuilder.group(formGroupObject);
            };
        RxFormBuilder.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        RxFormBuilder.ctorParameters = function () {
            return [
                { type: forms.FormBuilder }
            ];
        };
        return RxFormBuilder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RxReactiveFormsModule = (function () {
        function RxReactiveFormsModule() {
        }
        /**
         * @return {?}
         */
        RxReactiveFormsModule.forRoot = /**
         * @return {?}
         */
            function () { return { ngModule: RxReactiveFormsModule, providers: [] }; };
        RxReactiveFormsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        exports: [],
                        imports: [forms.FormsModule, forms.ReactiveFormsModule],
                        providers: [RxFormBuilder],
                    },] },
        ];
        return RxReactiveFormsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function alpha(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["alpha"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function alphaNumeric(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["alphaNumeric"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function compare(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["compare"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function contains(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["contains"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function creditCard(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["creditCard"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function digit(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["digit"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function email(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["email"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function hexColor(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["hexColor"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function lowerCase(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["lowerCase"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxDate(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["maxDate"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxLength(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["maxLength"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minDate(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["minDate"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function maxNumber(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["maxNumber"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minLength(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["minLength"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function minNumber(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["minNumber"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function password(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["password"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function pattern(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["pattern"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     * @param {?} entity
     * @return {?}
     */
    function propArray(entity) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ propertyInfo = {
                name: propertyKey,
                propertyType: ARRAY_PROPERTY,
                entity: entity
            };
            defaultContainer.addProperty(target.constructor, propertyInfo);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     * @param {?} entity
     * @return {?}
     */
    function propObject(entity) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ propertyInfo = {
                name: propertyKey,
                propertyType: OBJECT_PROPERTY,
                entity: entity
            };
            defaultContainer.addProperty(target.constructor, propertyInfo);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @return {?}
     */
    function prop() {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ propertyInfo = {
                name: propertyKey,
                propertyType: PROPERTY
            };
            defaultContainer.addProperty(target.constructor, propertyInfo);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function range(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["range"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function required(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["required"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function upperCase(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["upperCase"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function time(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["time"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function url(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["url"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} config
     * @return {?}
     */
    function json(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["json"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function greaterThan(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["greaterThan"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function greaterThanEqualTo(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["greaterThanEqualTo"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function lessThanEqualTo(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["lessThanEqualTo"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} config
     * @return {?}
     */
    function lessThan(config) {
        return function (target, propertyKey, parameterIndex) {
            var /** @type {?} */ decoratorConfiguration = {
                propertyIndex: parameterIndex,
                propertyName: propertyKey,
                annotationType: AnnotationTypes["lessThan"],
                config: config
            };
            var /** @type {?} */ isPropertyKey = (propertyKey != undefined);
            defaultContainer.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.RxReactiveFormsModule = RxReactiveFormsModule;
    exports.RxFormBuilder = RxFormBuilder;
    exports.FormBuilderConfiguration = FormBuilderConfiguration;
    exports.alpha = alpha;
    exports.alphaNumeric = alphaNumeric;
    exports.compare = compare;
    exports.contains = contains;
    exports.creditCard = creditCard;
    exports.digit = digit;
    exports.email = email;
    exports.hexColor = hexColor;
    exports.lowerCase = lowerCase;
    exports.maxDate = maxDate;
    exports.maxLength = maxLength;
    exports.minDate = minDate;
    exports.maxNumber = maxNumber;
    exports.minLength = minLength;
    exports.minNumber = minNumber;
    exports.password = password;
    exports.pattern = pattern;
    exports.propArray = propArray;
    exports.propObject = propObject;
    exports.prop = prop;
    exports.range = range;
    exports.required = required;
    exports.upperCase = upperCase;
    exports.time = time;
    exports.url = url;
    exports.json = json;
    exports.greaterThan = greaterThan;
    exports.greaterThanEqualTo = greaterThanEqualTo;
    exports.lessThanEqualTo = lessThanEqualTo;
    exports.lessThan = lessThan;
    exports.ReactiveFormConfig = ReactiveFormConfig;
    exports.CreditCardType = CreditCardType;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,