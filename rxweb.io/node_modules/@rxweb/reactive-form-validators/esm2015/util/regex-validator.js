/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { RegExRule } from "./regex-rules";
const /** @type {?} */ ALPHABET = "alphabet";
const /** @type {?} */ DIGIT = "digit";
const /** @type {?} */ CONTAINS = "contains";
const /** @type {?} */ LOWERCASE = "lowerCase";
const /** @type {?} */ UPPERCASE = "upperCase";
const /** @type {?} */ SPECIAL_CHARACTER = "specialCharacter";
const /** @type {?} */ MIN_LENGTH = "minLength";
const /** @type {?} */ MAX_LENGTH = "maxLength";
export class RegexValidator {
    /**
     * @param {?} value
     * @param {?} regex
     * @return {?}
     */
    static isExits(value, regex) {
        return value.match(regex) != null;
    }
    /**
     * @param {?} value
     * @param {?} regex
     * @return {?}
     */
    static isValid(value, regex) {
        return regex.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNotBlank(value) {
        return value != undefined && value != "" && value != null;
    }
    /**
     * @param {?} passwordValidation
     * @param {?} value
     * @return {?}
     */
    static isValidPassword(passwordValidation, value) {
        let /** @type {?} */ isValid = false;
        let /** @type {?} */ jObject = {};
        let /** @type {?} */ keyName = "status";
        let /** @type {?} */ objectProperties = Object.getOwnPropertyNames(passwordValidation);
        for (let /** @type {?} */ propertyName of objectProperties) {
            switch (propertyName) {
                case ALPHABET:
                    isValid = RegexValidator.isExits(value, RegExRule["alpha"]);
                    keyName = ALPHABET;
                    break;
                case DIGIT:
                    isValid = RegexValidator.isValid(value, RegExRule["isDigitExits"]);
                    keyName = DIGIT;
                    break;
                case CONTAINS:
                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                    keyName = CONTAINS;
                    break;
                case LOWERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule["lowerCase"]);
                    keyName = LOWERCASE;
                    break;
                case UPPERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule["upperCase"]);
                    keyName = UPPERCASE;
                    break;
                case SPECIAL_CHARACTER:
                    isValid = RegexValidator.isExits(value, RegExRule["specialCharacter"]);
                    keyName = SPECIAL_CHARACTER;
                    break;
                case MIN_LENGTH:
                    isValid = value.length >= passwordValidation[propertyName];
                    keyName = MIN_LENGTH;
                    break;
                case MAX_LENGTH:
                    isValid = value.length <= passwordValidation[propertyName];
                    keyName = MAX_LENGTH;
                    break;
            }
            if (!isValid)
                break;
        }
        return { isValid: isValid, keyName: keyName };
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnZXgtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvcmVnZXgtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLHVCQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsdUJBQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQztBQUM5Qix1QkFBTSxRQUFRLEdBQVcsVUFBVSxDQUFDO0FBQ3BDLHVCQUFNLFNBQVMsR0FBVyxXQUFXLENBQUM7QUFDdEMsdUJBQU0sU0FBUyxHQUFXLFdBQVcsQ0FBQztBQUN0Qyx1QkFBTSxpQkFBaUIsR0FBVyxrQkFBa0IsQ0FBQztBQUNyRCx1QkFBTSxVQUFVLEdBQVcsV0FBVyxDQUFDO0FBQ3ZDLHVCQUFNLFVBQVUsR0FBVyxXQUFXLENBQUM7QUFHdkMsTUFBTTs7Ozs7O0lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFVLEVBQUUsS0FBYTtRQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUM7S0FDckM7Ozs7OztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBVSxFQUFFLEtBQWE7UUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDNUI7Ozs7O0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFVO1FBQ3hCLE1BQU0sQ0FBQyxLQUFLLElBQUksU0FBUyxJQUFJLEtBQUssSUFBSSxFQUFFLElBQUksS0FBSyxJQUFJLElBQUksQ0FBRTtLQUM5RDs7Ozs7O0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxrQkFBc0MsRUFBRSxLQUFhO1FBQ3hFLHFCQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIscUJBQUksT0FBTyxHQUEyQixFQUFFLENBQUM7UUFDekMscUJBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN2QixxQkFBSSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNyRSxHQUFHLENBQUMsQ0FBQyxxQkFBSSxZQUFZLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEtBQUssUUFBUTtvQkFDVCxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxVQUFPLENBQUM7b0JBQ3pELE9BQU8sR0FBRyxRQUFRLENBQUM7b0JBQ25CLEtBQUssQ0FBQztnQkFDVixLQUFLLEtBQUs7b0JBQ04sT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsaUJBQWMsQ0FBQztvQkFDaEUsT0FBTyxHQUFHLEtBQUssQ0FBQztvQkFDaEIsS0FBSyxDQUFDO2dCQUNWLEtBQUssUUFBUTtvQkFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM1RCxPQUFPLEdBQUcsUUFBUSxDQUFDO29CQUNuQixLQUFLLENBQUM7Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLGNBQVcsQ0FBQztvQkFDN0QsT0FBTyxHQUFHLFNBQVMsQ0FBQztvQkFDcEIsS0FBSyxDQUFDO2dCQUNWLEtBQUssU0FBUztvQkFDVixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxjQUFXLENBQUM7b0JBQzdELE9BQU8sR0FBRyxTQUFTLENBQUM7b0JBQ3BCLEtBQUssQ0FBQztnQkFDVixLQUFLLGlCQUFpQjtvQkFDbEIsT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMscUJBQWtCLENBQUM7b0JBQ3BFLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQztvQkFDNUIsS0FBSyxDQUFDO2dCQUNWLEtBQUssVUFBVTtvQkFDWCxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDM0QsT0FBTyxHQUFHLFVBQVUsQ0FBQztvQkFDckIsS0FBSyxDQUFDO2dCQUNWLEtBQUssVUFBVTtvQkFDWCxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDM0QsT0FBTyxHQUFHLFVBQVUsQ0FBQztvQkFDckIsS0FBSyxDQUFDO2FBQ2I7WUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDVCxLQUFLLENBQUM7U0FDYjtRQUNELE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFBO0tBQ2hEO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzd29yZFZhbGlkYXRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL3Bhc3N3b3JkLXZhbGlkYXRpb24ubW9kZWxcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4vcmVnZXgtcnVsZXNcIjtcclxuXHJcbmNvbnN0IEFMUEhBQkVUOiBzdHJpbmcgPSBcImFscGhhYmV0XCI7XHJcbmNvbnN0IERJR0lUOiBzdHJpbmcgPSBcImRpZ2l0XCI7XHJcbmNvbnN0IENPTlRBSU5TOiBzdHJpbmcgPSBcImNvbnRhaW5zXCI7XHJcbmNvbnN0IExPV0VSQ0FTRTogc3RyaW5nID0gXCJsb3dlckNhc2VcIjtcclxuY29uc3QgVVBQRVJDQVNFOiBzdHJpbmcgPSBcInVwcGVyQ2FzZVwiO1xyXG5jb25zdCBTUEVDSUFMX0NIQVJBQ1RFUjogc3RyaW5nID0gXCJzcGVjaWFsQ2hhcmFjdGVyXCI7XHJcbmNvbnN0IE1JTl9MRU5HVEg6IHN0cmluZyA9IFwibWluTGVuZ3RoXCI7XHJcbmNvbnN0IE1BWF9MRU5HVEg6IHN0cmluZyA9IFwibWF4TGVuZ3RoXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlZ2V4VmFsaWRhdG9yIHtcclxuICAgIHN0YXRpYyBpc0V4aXRzKHZhbHVlOiBhbnksIHJlZ2V4OiBSZWdFeHApOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubWF0Y2gocmVnZXgpICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNWYWxpZCh2YWx1ZTogYW55LCByZWdleDogUmVnRXhwKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc05vdEJsYW5rKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gdW5kZWZpbmVkICYmIHZhbHVlICE9IFwiXCIgJiYgdmFsdWUgIT0gbnVsbCA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzVmFsaWRQYXNzd29yZChwYXNzd29yZFZhbGlkYXRpb246IFBhc3N3b3JkVmFsaWRhdGlvbiwgdmFsdWU6IHN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGpPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcclxuICAgICAgICBsZXQga2V5TmFtZSA9IFwic3RhdHVzXCI7XHJcbiAgICAgICAgbGV0IG9iamVjdFByb3BlcnRpZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwYXNzd29yZFZhbGlkYXRpb24pXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIG9mIG9iamVjdFByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQUxQSEFCRVQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzRXhpdHModmFsdWUsIFJlZ0V4UnVsZS5hbHBoYSk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IEFMUEhBQkVUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBESUdJVDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSwgUmVnRXhSdWxlLmlzRGlnaXRFeGl0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IERJR0lUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDT05UQUlOUzpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsdWUuaW5kZXhPZihwYXNzd29yZFZhbGlkYXRpb25bQ09OVEFJTlNdKSAhPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gQ09OVEFJTlM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExPV0VSQ0FTRTpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSwgUmVnRXhSdWxlLmxvd2VyQ2FzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IExPV0VSQ0FTRTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVVBQRVJDQVNFOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlLCBSZWdFeFJ1bGUudXBwZXJDYXNlKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gVVBQRVJDQVNFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBTUEVDSUFMX0NIQVJBQ1RFUjpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNFeGl0cyh2YWx1ZSwgUmVnRXhSdWxlLnNwZWNpYWxDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBTUEVDSUFMX0NIQVJBQ1RFUjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTUlOX0xFTkdUSDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsdWUubGVuZ3RoID49IHBhc3N3b3JkVmFsaWRhdGlvbltwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBNSU5fTEVOR1RIO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNQVhfTEVOR1RIOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWx1ZS5sZW5ndGggPD0gcGFzc3dvcmRWYWxpZGF0aW9uW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IE1BWF9MRU5HVEg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGlzVmFsaWQsIGtleU5hbWU6IGtleU5hbWUgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==