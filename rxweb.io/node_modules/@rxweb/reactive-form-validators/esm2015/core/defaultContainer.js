/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Linq } from "../util/linq";
import { AnnotationTypes } from "./validator.static";
import { PROPERTY } from "../const";
export const /** @type {?} */ defaultContainer = new (class {
    constructor() {
        this.instances = [];
    }
    /**
     * @template T
     * @param {?} instanceFunc
     * @return {?}
     */
    get(instanceFunc) {
        let /** @type {?} */ instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];
        return instance;
    }
    /**
     * @param {?} instanceFunc
     * @return {?}
     */
    addInstanceContainer(instanceFunc) {
        let /** @type {?} */ instanceContainer = {
            instance: instanceFunc,
            propertyAnnotations: [],
            properties: []
        };
        this.instances.push(instanceContainer);
        return instanceContainer;
    }
    /**
     * @param {?} instanceFunc
     * @param {?} propertyInfo
     * @return {?}
     */
    addProperty(instanceFunc, propertyInfo) {
        let /** @type {?} */ instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];
        if (instance) {
            this.addPropertyInfo(instance, propertyInfo);
        }
        else {
            instance = this.addInstanceContainer(instanceFunc);
            this.addPropertyInfo(instance, propertyInfo);
        }
    }
    /**
     * @param {?} instance
     * @param {?} propertyInfo
     * @return {?}
     */
    addPropertyInfo(instance, propertyInfo) {
        var /** @type {?} */ property = instance.properties.filter(t => t.name == propertyInfo.name)[0];
        if (!property)
            instance.properties.push(propertyInfo);
    }
    /**
     * @param {?} instanceFunc
     * @param {?} decoratorConfiguration
     * @return {?}
     */
    addAnnotation(instanceFunc, decoratorConfiguration) {
        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName });
        let /** @type {?} */ instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];
        if (instance)
            instance.propertyAnnotations.push(decoratorConfiguration);
        else {
            instance = this.addInstanceContainer(instanceFunc);
            instance.propertyAnnotations.push(decoratorConfiguration);
        }
        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpressions) {
            let /** @type {?} */ columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpressions);
            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
        }
        if (instance && decoratorConfiguration.config && (decoratorConfiguration.annotationType == AnnotationTypes["compare"] || decoratorConfiguration.annotationType == AnnotationTypes["greaterThan"] || decoratorConfiguration.annotationType == AnnotationTypes["greaterThanEqualTo"] || decoratorConfiguration.annotationType == AnnotationTypes["lessThan"] || decoratorConfiguration.annotationType == AnnotationTypes["lessThanEqualTo"])) {
            this.setConditionalValueProp(instance, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);
        }
    }
    /**
     * @param {?} instance
     * @param {?} propName
     * @param {?} refPropName
     * @return {?}
     */
    setConditionalValueProp(instance, propName, refPropName) {
        if (!instance.conditionalValidationProps)
            instance.conditionalValidationProps = {};
        if (!instance.conditionalValidationProps[propName])
            instance.conditionalValidationProps[propName] = [];
        if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)
            instance.conditionalValidationProps[propName].push(refPropName);
    }
    /**
     * @param {?} instance
     * @param {?} propertyName
     * @param {?} columns
     * @return {?}
     */
    addChangeValidation(instance, propertyName, columns) {
        if (instance) {
            if (!instance.conditionalValidationProps)
                instance.conditionalValidationProps = {};
            columns.forEach(t => {
                if (t.propName && !t.objectPropName) {
                    if (!instance.conditionalValidationProps[t.propName])
                        instance.conditionalValidationProps[t.propName] = [];
                    if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)
                        instance.conditionalValidationProps[t.propName].push(propertyName);
                }
                else {
                    if (t.propName && t.objectPropName) {
                        if (!instance.conditionalObjectProps)
                            instance.conditionalObjectProps = [];
                        t.referencePropName = propertyName;
                        instance.conditionalObjectProps["push"](t);
                    }
                }
            });
        }
    }
})();

//# sourceMappingURL=data:application/json;base64,