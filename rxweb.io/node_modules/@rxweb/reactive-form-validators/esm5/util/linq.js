/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Linq = /** @class */ (function () {
    function Linq() {
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    Linq.functionCreator = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        var /** @type {?} */ functionSetter = [];
        var /** @type {?} */ match = expression.match(/^\s*\(?\s*([^)]*)\s*\)?\s*=>(.*)/);
        var /** @type {?} */ splitSelect = match[2].split(",");
        for (var /** @type {?} */ i = 0; i < splitSelect.length; i++) {
            var /** @type {?} */ equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*==(.*)/);
            if (equalToOperator !== null) {
                functionSetter = new Function(match[1], "return " + equalToOperator[0]);
            }
            else {
                equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*=(.*)/);
                if (equalToOperator === null) {
                    functionSetter = new Function(match[1], "return " + splitSelect[i]);
                }
                else {
                    functionSetter = new Function(match[1], "return " + equalToOperator[2]);
                }
            }
        }
        if (splitSelect.length == 0)
            functionSetter = { accessFunction: new Function(match[1], "return " + match[2]) };
        return functionSetter;
    };
    /**
     * @param {?} jObject
     * @param {?} expression
     * @param {?} parentObject
     * @return {?}
     */
    Linq.IsPassed = /**
     * @param {?} jObject
     * @param {?} expression
     * @param {?} parentObject
     * @return {?}
     */
    function (jObject, expression, parentObject) {
        var /** @type {?} */ expressionFunction = expression;
        if (parentObject && typeof expression == "string")
            expressionFunction = Linq.functionCreator(expression);
        if (parentObject && expressionFunction)
            return expressionFunction(parentObject, jObject);
        return true;
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    Linq.expressionColumns = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        var /** @type {?} */ columns = [];
        var /** @type {?} */ splitExpressions = [];
        if (typeof expression == "string")
            expression.split("=>")[1].split(" && ").forEach(function (t) {
                t.split(" || ").forEach(function (x) {
                    splitExpressions.push(x.trim().split(' ')[0]);
                });
            });
        else
            String(expression).split(" return ")[1].split(" && ").forEach(function (t) {
                t.split(" || ").forEach(function (x) {
                    splitExpressions.push(x.trim().split(' ')[0]);
                });
            });
        splitExpressions.forEach(function (t) {
            var /** @type {?} */ splitText = t.split('.');
            if (splitText.length == 2)
                columns.push({ propName: splitText[1].trim() });
            else {
                var /** @type {?} */ arrayProp = splitText[1].split('[');
                var /** @type {?} */ jObject = {
                    propName: splitText[splitText.length - 1].trim(),
                    objectPropName: arrayProp[0],
                    arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined
                };
                columns.push(jObject);
            }
        });
        return columns;
    };
    return Linq;
}());
export { Linq };

//# sourceMappingURL=data:application/json;base64,