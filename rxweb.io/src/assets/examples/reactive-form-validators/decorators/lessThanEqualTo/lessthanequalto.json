{"fieldNameExample":{"Notes":null,"Component":null,"Html":null,"Model":"@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  }) \r\nobtainedMarks: number;"},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  }) \r\nobtainedMarks: number;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' }) \r\npracticalExamMarks: number;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' }) \r\notherMarks: number;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-complete',\r\n    templateUrl: './less-than-equal-to-complete.component.html'\r\n})\r\nexport class LessThanEqualToCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  }) \r\n\tobtainedMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n"},"fieldName":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-fieldName',\r\n    templateUrl: './less-than-equal-to-field-name.component.html'\r\n})\r\nexport class LessThanEqualToFieldNameComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  }) \r\n\tobtainedMarks: number;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-conditionalExpression',\r\n    templateUrl: './less-than-equal-to-conditional-expression.component.html'\r\n})\r\nexport class LessThanEqualToConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  }) \r\n\tobtainedMarks: number;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-message',\r\n    templateUrl: './less-than-equal-to-message.component.html'\r\n})\r\nexport class LessThanEqualToMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t@lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-dynamic',\r\n    templateUrl: './less-than-equal-to-dynamic.component.html'\r\n})\r\nexport class LessThanEqualToDynamicComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tobtainedMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',conditionalExpression:(x,y) => x.totalMarks == 100 ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tpracticalExamMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',conditionalExpression:'x => x.totalMarks == 100',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\totherMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',message:'Please enter number less than 100.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@prop()\r\n\tpracticalExamMarks: number;\r\n\r\n\t@prop()\r\n\totherMarks: number;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-add',\r\n    templateUrl: './less-than-equal-to-add.component.html'\r\n})\r\nexport class LessThanEqualToAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Marks</label>\r\n    <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This is checking less than equal to validation for  Marks must be less than equal to Total Marks.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t@lessThanEqualTo({fieldName:'totalMarks' }) \r\n\tmarks: number;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-edit',\r\n    templateUrl: './less-than-equal-to-edit.component.html'\r\n})\r\nexport class LessThanEqualToEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/lessThanEqualTo/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Marks</label>\r\n    <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This is checking less than equal to validation for  Marks must be less than equal to Total Marks.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  lessThanEqualTo,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttotalMarks: number;\r\n\r\n\t@lessThanEqualTo({fieldName:'totalMarks' }) \r\n\tmarks: number;\r\n\r\n}\r\n"}}