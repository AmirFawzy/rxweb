{"allowDecimalExample":{"Notes":null,"Component":null,"Html":null,"Model":"@numeric({acceptValue:NumericValueType.NegativeNumber  ,allowDecimal:true  ,message:'{{0}} is not a negative number' }) \r\nnegativeNumber: number;"},"acceptValueExample":{"Notes":null,"Component":null,"Html":null,"Model":"@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\nintegerNumber: number;"},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\nintegerNumber: number;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@numeric({acceptValue:NumericValueType.Both  ,allowDecimal:false  ,conditionalExpression:'x => x.dataType == \"Number\"' }) \r\nrealNumber: number;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@numeric({acceptValue:NumericValueType.NegativeNumber  ,allowDecimal:true  ,message:'{{0}} is not a negative number' }) \r\nnegativeNumber: number;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-complete',\r\n    templateUrl: './numeric-complete.component.html'\r\n})\r\nexport class NumericCompleteComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Data Type</label>\r\n\t\t<input type=\"text\" formControlName=\"dataType\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' or 'Real Number', then you need to add 'Data Type' input as 'Number'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Real Number</label>\r\n\t\t<input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Negative Number</label>\r\n\t\t<input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\n\tintegerNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,allowDecimal:false  ,conditionalExpression:'x => x.dataType == \"Number\"' }) \r\n\trealNumber: number;\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber  ,allowDecimal:true  ,message:'{{0}} is not a negative number' }) \r\n\tnegativeNumber: number;\r\n\r\n}\r\n"},"acceptValue":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-acceptValue',\r\n    templateUrl: './numeric-accept-value.component.html'\r\n})\r\nexport class NumericAcceptValueComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Data Type</label>\r\n\t\t<input type=\"text\" formControlName=\"dataType\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' or 'Real Number', then you need to add 'Data Type' input as 'Number'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Real Number</label>\r\n\t\t<input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,allowDecimal:false  ,conditionalExpression:'x => x.dataType == \"Number\"' }) \r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n"},"allowDecimal":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-allowDecimal',\r\n    templateUrl: './numeric-allow-decimal.component.html'\r\n})\r\nexport class NumericAllowDecimalComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Data Type</label>\r\n\t\t<input type=\"text\" formControlName=\"dataType\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' or 'Real Number', then you need to add 'Data Type' input as 'Number'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Real Number</label>\r\n\t\t<input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,allowDecimal:false  ,conditionalExpression:'x => x.dataType == \"Number\"' }) \r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-conditionalExpression',\r\n    templateUrl: './numeric-conditional-expression.component.html'\r\n})\r\nexport class NumericConditionalExpressionComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Data Type</label>\r\n\t\t<input type=\"text\" formControlName=\"dataType\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' or 'Real Number', then you need to add 'Data Type' input as 'Number'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Real Number</label>\r\n\t\t<input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,allowDecimal:false  ,conditionalExpression:'x => x.dataType == \"Number\"' }) \r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false  ,conditionalExpression:(x,y) => x.dataType == \"Number\"  }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-message',\r\n    templateUrl: './numeric-message.component.html'\r\n})\r\nexport class NumericMessageComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Negative Number</label>\r\n\t\t<input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber  ,allowDecimal:true  ,message:'{{0}} is not a negative number' }) \r\n\tnegativeNumber: number;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n\tNumericValueType\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-dynamic',\r\n    templateUrl: './numeric-dynamic.component.html'\r\n})\r\nexport class NumericDynamicComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tintegerNumber : {\r\n\t\t\t\tnumeric :  {acceptValue:NumericValueType.PositiveNumber,allowDecimal:false,conditionalExpression:(x,y) => x.dataType == \"Number\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\trealNumber : {\r\n\t\t\t\tnumeric :  {acceptValue:NumericValueType.Both,allowDecimal:false,conditionalExpression:'x => x.dataType == \"Number\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tnegativeNumber : {\r\n\t\t\t\tnumeric :  {acceptValue:NumericValueType.NegativeNumber,allowDecimal:true,message:'{{0}} is not a negative number',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userInfoFormGroup = this.formBuilder.formGroup(userInfo,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Data Type</label>\r\n\t\t<input type=\"text\" formControlName=\"dataType\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' or 'Real Number', then you need to add 'Data Type' input as 'Number'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Real Number</label>\r\n\t\t<input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Number'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Negative Number</label>\r\n\t\t<input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@prop()\r\n\tintegerNumber: number;\r\n\r\n\t@prop()\r\n\trealNumber: number;\r\n\r\n\t@prop()\r\n\tnegativeNumber: number;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-add',\r\n    templateUrl: './numeric-add.component.html'\r\n})\r\nexport class NumericAddComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-edit',\r\n    templateUrl: './numeric-edit.component.html'\r\n})\r\nexport class NumericEditComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/numeric/edit/user-info-data.json').subscribe(userInfo => {\r\n            this.userInfoFormGroup = this.formBuilder.formGroup<UserInfo>(UserInfo,userInfo);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Integer Number</label>\r\n\t\t<input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n"}}