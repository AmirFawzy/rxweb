{"valueExample":{"Notes":null,"Component":null,"Html":null,"Model":"@maxLength({value:16 }) \r\nfirstName: string;"},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@maxLength({value:16  ,conditionalExpression:(x,y)=>{ return x.firstName == \"John\"} }) \r\nmiddleName: string;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@maxLength({value:16  ,conditionalExpression:x=> x.firstName == \"John\" }) \r\nlastName: string;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@maxLength({value:10  ,message:'Maximum 10 characters are allowed' }) \r\nuserName: string;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-complete',\r\n    templateUrl: './max-length-complete.component.html'\r\n})\r\nexport class MaxLengthCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply validation here, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of lowerCase on 'Last Name' field, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@maxLength({value:16 }) \r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@maxLength({value:16  ,conditionalExpression:(x,y)=>{ return x.firstName == \"John\"} }) \r\n\tmiddleName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@maxLength({value:16  ,conditionalExpression:x=> x.firstName == \"John\" }) \r\n\tlastName: string;\r\n\r\n\t@maxLength({value:10  ,message:'Maximum 10 characters are allowed' }) \r\n\tuserName: string;\r\n\r\n}\r\n"},"value":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-value',\r\n    templateUrl: './max-length-value.component.html'\r\n})\r\nexport class MaxLengthValueComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@maxLength({value:16 }) \r\n\tfirstName: string;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-conditionalExpression',\r\n    templateUrl: './max-length-conditional-expression.component.html'\r\n})\r\nexport class MaxLengthConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of lowerCase on 'Last Name' field, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply validation here, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@maxLength({value:16 }) \r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@maxLength({value:16  ,conditionalExpression:x=> x.firstName == \"John\" }) \r\n\tlastName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@maxLength({value:16  ,conditionalExpression:(x,y)=>{ return x.firstName == \"John\"} }) \r\n\tmiddleName: string;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-message',\r\n    templateUrl: './max-length-message.component.html'\r\n})\r\nexport class MaxLengthMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@maxLength({value:10  ,message:'Maximum 10 characters are allowed' }) \r\n\tuserName: string;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-dynamic',\r\n    templateUrl: './max-length-dynamic.component.html'\r\n})\r\nexport class MaxLengthDynamicComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tfirstName : {\r\n\t\t\t\tmaxLength :  {value:16,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tmiddleName : {\r\n\t\t\t\tmaxLength :  {value:16,conditionalExpression:(x,y)=>{ return x.firstName == \"John\"},} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tlastName : {\r\n\t\t\t\tmaxLength :  {value:16,conditionalExpression:x=> x.firstName == \"John\",} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tuserName : {\r\n\t\t\t\tmaxLength :  {value:10,message:'Maximum 10 characters are allowed',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply validation here, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of lowerCase on 'Last Name' field, write 'John' in 'First Name' textbox because it is conditional expression. and maximum length is 16<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@prop()\r\n\tmiddleName: string;\r\n\r\n\t@prop()\r\n\tlastName: string;\r\n\r\n\t@prop()\r\n\tuserName: string;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-add',\r\n    templateUrl: './max-length-add.component.html'\r\n})\r\nexport class MaxLengthAddComponent implements OnInit {\r\n\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"locationFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Maximum Length Upto 10 characters<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.firstName.errors\">{{locationFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@maxLength({value:10 }) \r\n\tfirstName: string;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLength-edit',\r\n    templateUrl: './max-length-edit.component.html'\r\n})\r\nexport class MaxLengthEditComponent implements OnInit {\r\n\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/maxLength/edit/location-data.json').subscribe(location => {\r\n            this.locationFormGroup = this.formBuilder.formGroup<Location>(Location,location);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"locationFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Maximum Length Upto 10 characters<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.firstName.errors\">{{locationFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  maxLength,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@maxLength({value:10 }) \r\n\tfirstName: string;\r\n\r\n}\r\n"}}