{"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  }) \r\ncssDataUri: string;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' }) \r\njavascriptDataUri: string;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@dataUri({message:'{{0}} is not a proper data URI' }) \r\nhtmlDataUri: string;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-complete',\r\n    templateUrl: './data-uri-complete.component.html'\r\n})\r\nexport class DataUriCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CSS Data Uri</label>\r\n      <input type=\"text\" formControlName=\"cssDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.cssDataUri.errors\">{{userFormGroup.controls.cssDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tscheme: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  }) \r\n\tcssDataUri: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' }) \r\n\tjavascriptDataUri: string;\r\n\r\n\t@dataUri({message:'{{0}} is not a proper data URI' }) \r\n\thtmlDataUri: string;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-conditionalExpression',\r\n    templateUrl: './data-uri-conditional-expression.component.html'\r\n})\r\nexport class DataUriConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CSS Data Uri</label>\r\n      <input type=\"text\" formControlName=\"cssDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.cssDataUri.errors\">{{userFormGroup.controls.cssDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tscheme: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' }) \r\n\tjavascriptDataUri: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  }) \r\n\tcssDataUri: string;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-message',\r\n    templateUrl: './data-uri-message.component.html'\r\n})\r\nexport class DataUriMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@dataUri({message:'{{0}} is not a proper data URI' }) \r\n\thtmlDataUri: string;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-dynamic',\r\n    templateUrl: './data-uri-dynamic.component.html'\r\n})\r\nexport class DataUriDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\r\n\t\r\n\t\t\tjavascriptDataUri : {\r\n\t\t\t\tdataUri : {conditionalExpression:'x => x.scheme ==\"DataUri\"',} \r\n\t\t\t},\t\r\n\t\t\thtmlDataUri : {\r\n\t\t\t\tdataUri : {message:'{{0}} is not a proper data URI',} \r\n\t\t\t},\t\t};\r\n        this.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n      <input type=\"text\" formControlName=\"scheme\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.scheme.errors\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n      <input type=\"text\" formControlName=\"javascriptDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.javascriptDataUri.errors\">{{userFormGroup.controls.javascriptDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tscheme: string;\r\n\r\n\t@prop()\r\n\tjavascriptDataUri: string;\r\n\r\n\t@prop()\r\n\thtmlDataUri: string;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-add',\r\n    templateUrl: './data-uri-add.component.html'\r\n})\r\nexport class DataUriAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@dataUri() \r\n\thtmlDataUri: string;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-edit',\r\n    templateUrl: './data-uri-edit.component.html'\r\n})\r\nexport class DataUriEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,        private http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/dataUri/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n      <input type=\"text\" formControlName=\"htmlDataUri\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.htmlDataUri.errors\">{{userFormGroup.controls.htmlDataUri.errors.dataUri.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":"import {  dataUri,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@dataUri() \r\n\thtmlDataUri: string;\r\n\r\n}\r\n"}}