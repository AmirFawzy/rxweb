{"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@ascii({conditionalExpression:(x,y) => x.language == \"Java\"  }) \r\nnumberAsciiCode: string;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@ascii({conditionalExpression:'x => x.language ==\"Java\"' }) \r\nalphabetAsciiCode: string;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@ascii({message:'{{0}} is not an Ascii Code' }) \r\nspecialCharAsciiCode: string;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-complete',\r\n    templateUrl: './ascii-complete.component.html'\r\n})\r\nexport class AsciiCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tlanguage: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@ascii({conditionalExpression:(x,y) => x.language == \"Java\"  }) \r\n\tnumberAsciiCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@ascii({conditionalExpression:'x => x.language ==\"Java\"' }) \r\n\talphabetAsciiCode: string;\r\n\r\n\t@ascii({message:'{{0}} is not an Ascii Code' }) \r\n\tspecialCharAsciiCode: string;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-conditionalExpression',\r\n    templateUrl: './ascii-conditional-expression.component.html'\r\n})\r\nexport class AsciiConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tlanguage: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@ascii({conditionalExpression:'x => x.language ==\"Java\"' }) \r\n\talphabetAsciiCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@ascii({conditionalExpression:(x,y) => x.language == \"Java\"  }) \r\n\tnumberAsciiCode: string;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-message',\r\n    templateUrl: './ascii-message.component.html'\r\n})\r\nexport class AsciiMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@ascii({message:'{{0}} is not an Ascii Code' }) \r\n\tspecialCharAsciiCode: string;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-dynamic',\r\n    templateUrl: './ascii-dynamic.component.html'\r\n})\r\nexport class AsciiDynamicComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tnumberAsciiCode : {\r\n\t\t\t\tascii :  {conditionalExpression:(x,y) => x.language == \"Java\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\talphabetAsciiCode : {\r\n\t\t\t\tascii :  {conditionalExpression:'x => x.language ==\"Java\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tspecialCharAsciiCode : {\r\n\t\t\t\tascii :  {message:'{{0}} is not an Ascii Code',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tlanguage: string;\r\n\r\n\t@prop()\r\n\tnumberAsciiCode: string;\r\n\r\n\t@prop()\r\n\talphabetAsciiCode: string;\r\n\r\n\t@prop()\r\n\tspecialCharAsciiCode: string;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-add',\r\n    templateUrl: './ascii-add.component.html'\r\n})\r\nexport class AsciiAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You must enter an Ascii Code only<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@ascii() \r\n\tspecialCharAsciiCode: string;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ascii-edit',\r\n    templateUrl: './ascii-edit.component.html'\r\n})\r\nexport class AsciiEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/ascii/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You must enter an Ascii Code only<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  ascii,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@ascii() \r\n\tspecialCharAsciiCode: string;\r\n\r\n}\r\n"}}