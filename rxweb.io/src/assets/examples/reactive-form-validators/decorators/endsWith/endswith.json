{"valueExample":{"Notes":null,"Component":null,"Html":null,"Model":"@endsWith({value:'r'  ,conditionalExpression:(x,y) => x.name == \"Adam\"  }) \r\nprofession: string;"},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object."],"Component":null,"Html":null,"Model":"@endsWith({value:'r'  ,conditionalExpression:(x,y) => x.name == \"Adam\"  }) \r\nprofession: string;"},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> datatype."],"Component":null,"Html":null,"Model":"@endsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Adam\"' }) \r\ntaskId: string;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"@endsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Adam\"' }) \r\ntaskId: string;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-complete',\r\n    templateUrl: './ends-with-complete.component.html'\r\n})\r\nexport class EndsWithCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Adam'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n    <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with 'r'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n    <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with '1'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m'  ,message:'{{0}} does not ends with `m`' }) \r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@endsWith({value:'r'  ,conditionalExpression:(x,y) => x.name == \"Adam\"  }) \r\n\tprofession: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@endsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Adam\"' }) \r\n\ttaskId: string;\r\n\r\n}\r\n"},"value":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-value',\r\n    templateUrl: './ends-with-value.component.html'\r\n})\r\nexport class EndsWithValueComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Adam'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m'  ,message:'{{0}} does not ends with `m`' }) \r\n\tname: string;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-message',\r\n    templateUrl: './ends-with-message.component.html'\r\n})\r\nexport class EndsWithMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Adam'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m'  ,message:'{{0}} does not ends with `m`' }) \r\n\tname: string;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-conditionalExpression',\r\n    templateUrl: './ends-with-conditional-expression.component.html'\r\n})\r\nexport class EndsWithConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Adam'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n    <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with '1'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n    <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with 'r'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m'  ,message:'{{0}} does not ends with `m`' }) \r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@endsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Adam\"' }) \r\n\ttaskId: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@endsWith({value:'r'  ,conditionalExpression:(x,y) => x.name == \"Adam\"  }) \r\n\tprofession: string;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-dynamic',\r\n    templateUrl: './ends-with-dynamic.component.html'\r\n})\r\nexport class EndsWithDynamicComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tname : {\r\n\t\t\t\tendsWith :  {value:'m',message:'{{0}} does not ends with `m`',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tprofession : {\r\n\t\t\t\tendsWith :  {value:'r',conditionalExpression:(x,y) => x.name == \"Adam\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\ttaskId : {\r\n\t\t\t\tendsWith :  {value:'#',conditionalExpression:'x => x.name ==\"Adam\"',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Adam'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n    <input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with 'r'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n    <input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with '1'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Adam'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tname: string;\r\n\r\n\t@prop()\r\n\tprofession: string;\r\n\r\n\t@prop()\r\n\ttaskId: string;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-add',\r\n    templateUrl: './ends-with-add.component.html'\r\n})\r\nexport class EndsWithAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with 'm'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m' }) \r\n\tname: string;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-edit',\r\n    templateUrl: './ends-with-edit.component.html'\r\n})\r\nexport class EndsWithEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/endsWith/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter value which ends with 'm'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  endsWith,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@endsWith({value:'m' }) \r\n\tname: string;\r\n\r\n}\r\n"}}