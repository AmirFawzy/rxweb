{"fieldNameExample":"","conditionalExpressionExampleFunction":"","conditionalExpressionExampleString":"","messageExample":"","complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-complete-validator',\r\n    templateUrl: './less-than-complete.component.html'\r\n})\r\nexport class LessThanCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>{ return  x.obtainedMarks < 35} })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpassingMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:x => x.obtainedMarks < 35  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\totherMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"fieldName":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-fieldName-validator',\r\n    templateUrl: './less-than-field-name.component.html'\r\n})\r\nexport class LessThanFieldNameValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassingMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:x => x.obtainedMarks < 35  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>{ return  x.obtainedMarks < 35} })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-conditionalExpression-validator',\r\n    templateUrl: './less-than-conditional-expression.component.html'\r\n})\r\nexport class LessThanConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassingMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:x => x.obtainedMarks < 35  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>{ return  x.obtainedMarks < 35} })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-message-validator',\r\n    templateUrl: './less-than-message.component.html'\r\n})\r\nexport class LessThanMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassingMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:x => x.obtainedMarks < 35  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\totherMarks:['',RxwebValidators.lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-dynamic-validator',\r\n    templateUrl: './less-than-dynamic.component.html'\r\n})\r\nexport class LessThanDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tpracticalExamMarks : {\r\n\t\t\t\tlessThan :  {fieldName:'obtainedMarks',conditionalExpression:(x,y) =>{ return  x.obtainedMarks < 35},} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tpassingMarks : {\r\n\t\t\t\tlessThan :  {fieldName:'obtainedMarks',conditionalExpression:x => x.obtainedMarks < 35 ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\totherMarks : {\r\n\t\t\t\tlessThan :  {fieldName:'obtainedMarks',message:'Please enter number greater than 100.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tpracticalExamMarks:'', passingMarks:'', otherMarks:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-add-validator',\r\n    templateUrl: './less-than-add.component.html'\r\n})\r\nexport class LessThanAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassingMarks:['',RxwebValidators.lessThan({fieldName:'marks' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Marks</label>\r\n    <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Passing Marks</label>\r\n    <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This is checking less than validation for PassingMarks must be less than to marks.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}