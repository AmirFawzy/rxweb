{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-required-complete-validator',\r\n    templateUrl: './required-complete.component.html'\r\n})\r\nexport class RequiredCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tfirstName:['', RxwebValidators.required()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmiddleName:['', RxwebValidators.required({conditionalExpression:(x,y) => x.firstName == \"John\"  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlastName:['', RxwebValidators.required({conditionalExpression:'x => x.firstName == \"John\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tuserName:['', RxwebValidators.required({message:'Username cannot be blank.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-required-conditionalExpression-validator',\r\n    templateUrl: './required-conditional-expression.component.html'\r\n})\r\nexport class RequiredConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tfirstName:['', RxwebValidators.required()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlastName:['', RxwebValidators.required({conditionalExpression:'x => x.firstName == \"John\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmiddleName:['', RxwebValidators.required({conditionalExpression:(x,y) => x.firstName == \"John\"  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"lastName:['', RxwebValidators.required({conditionalExpression:'x => x.firstName == \"John\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"middleName:['', RxwebValidators.required({conditionalExpression:(x,y) => x.firstName == \"John\"  })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-required-message-validator',\r\n    templateUrl: './required-message.component.html'\r\n})\r\nexport class RequiredMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tuserName:['', RxwebValidators.required({message:'Username cannot be blank.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"userName:['', RxwebValidators.required({message:'Username cannot be blank.' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-required-dynamic-validator',\r\n    templateUrl: './required-dynamic.component.html'\r\n})\r\nexport class RequiredDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tfirstName : {\r\n\t\t\t\trequired : true  \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tmiddleName : {\r\n\t\t\t\trequired :  {conditionalExpression:(x,y) => x.firstName == \"John\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tlastName : {\r\n\t\t\t\trequired :  {conditionalExpression:'x => x.firstName == \"John\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tuserName : {\r\n\t\t\t\trequired :  {message:'Username cannot be blank.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tfirstName:'', middleName:'', lastName:'', userName:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-required-add-validator',\r\n    templateUrl: './required-add.component.html'\r\n})\r\nexport class RequiredAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tfirstName:['', RxwebValidators.required()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}