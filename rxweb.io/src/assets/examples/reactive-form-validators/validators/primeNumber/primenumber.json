{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-complete-validator',\r\n    templateUrl: './prime-number-complete.component.html'\r\n})\r\nexport class PrimeNumberCompleteValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tnumberType:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsecondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfirstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"numberInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Number Type</label>\r\n    <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.secondNumber.errors\">{{numberInfoFormGroup.controls.secondNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-conditionalExpression-validator',\r\n    templateUrl: './prime-number-conditional-expression.component.html'\r\n})\r\nexport class PrimeNumberConditionalExpressionValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tnumberType:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsecondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"numberInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Number Type</label>\r\n    <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.secondNumber.errors\">{{numberInfoFormGroup.controls.secondNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"thirdNumber:['', RxwebValidators.primeNumber({conditionalExpression:'x => x.numberType ==\"Prime\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"secondNumber:['', RxwebValidators.primeNumber({conditionalExpression:(x,y) => x.numberType == \"Prime\"  })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-message-validator',\r\n    templateUrl: './prime-number-message.component.html'\r\n})\r\nexport class PrimeNumberMessageValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tfirstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"numberInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"firstNumber:['', RxwebValidators.primeNumber({message:'{{0}} is not a prime number' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-dynamic-validator',\r\n    templateUrl: './prime-number-dynamic.component.html'\r\n})\r\nexport class PrimeNumberDynamicValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tsecondNumber : {\r\n\t\t\t\tprimeNumber :  {conditionalExpression:(x,y) => x.numberType == \"Prime\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tthirdNumber : {\r\n\t\t\t\tprimeNumber :  {conditionalExpression:'x => x.numberType ==\"Prime\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tfirstNumber : {\r\n\t\t\t\tprimeNumber :  {message:'{{0}} is not a prime number',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var numberInfo = {\r\n\t\t\tnumberType:'', secondNumber:'', thirdNumber:'', firstNumber:'', \r\n\t\t}\r\n\t\tthis.numberInfoFormGroup = this.formBuilder.group(numberInfo,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"numberInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Number Type</label>\r\n    <input type=\"text\" formControlName=\"numberType\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.numberType.errors\">{{numberInfoFormGroup.controls.numberType.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.secondNumber.errors\">{{numberInfoFormGroup.controls.secondNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Number' then you need to add 'Number Type' input as 'Prime'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.thirdNumber.errors\">{{numberInfoFormGroup.controls.thirdNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can enter only prime number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-primeNumber-add-validator',\r\n    templateUrl: './prime-number-add.component.html'\r\n})\r\nexport class PrimeNumberAddValidatorComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.numberInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tfirstNumber:['', RxwebValidators.primeNumber()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"numberInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You must enter a proper prime number<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstNumber.errors\">{{numberInfoFormGroup.controls.firstNumber.errors.primeNumber.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}