{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-complete-validator',\r\n    templateUrl: './hex-color-complete.component.html'\r\n})\r\nexport class HexColorCompleteValidatorComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.hexcolorInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcolor:['', RxwebValidators.hexColor()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfooterHexCode:['', RxwebValidators.hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\theaderHexcolorCode:['', RxwebValidators.hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbodyHexcolorCode:['', RxwebValidators.hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Color Picker</label>\r\n\t\t<input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Footer Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"footerHexCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation of hex color validation on 'Footer Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.footerHexCode.errors\">{{hexcolorInfoFormGroup.controls.footerHexCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Header Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Body Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-conditionalExpression-validator',\r\n    templateUrl: './hex-color-conditional-expression.component.html'\r\n})\r\nexport class HexColorConditionalExpressionValidatorComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.hexcolorInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcolor:['', RxwebValidators.hexColor()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\theaderHexcolorCode:['', RxwebValidators.hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfooterHexCode:['', RxwebValidators.hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Color Picker</label>\r\n\t\t<input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Header Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Footer Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"footerHexCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation of hex color validation on 'Footer Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.footerHexCode.errors\">{{hexcolorInfoFormGroup.controls.footerHexCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"headerHexcolorCode:['', RxwebValidators.hexColor({conditionalExpression:'x => x.color == \"#AFAFAF\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"footerHexCode:['', RxwebValidators.hexColor({conditionalExpression:(x,y) =>x.color == \"#AFAFAF\" })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-message-validator',\r\n    templateUrl: './hex-color-message.component.html'\r\n})\r\nexport class HexColorMessageValidatorComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.hexcolorInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tbodyHexcolorCode:['', RxwebValidators.hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Body Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"bodyHexcolorCode:['', RxwebValidators.hexColor({message:'Please enter the right format of hexcode for body like \"#AFAFAF\"' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-dynamic-validator',\r\n    templateUrl: './hex-color-dynamic.component.html'\r\n})\r\nexport class HexColorDynamicValidatorComponent implements OnInit {\r\n    hexcolorInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tcolor : {\r\n\t\t\t\thexColor : true  \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tfooterHexCode : {\r\n\t\t\t\thexColor :  {conditionalExpression:(x,y) =>x.color == \"#AFAFAF\",} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\theaderHexcolorCode : {\r\n\t\t\t\thexColor :  {conditionalExpression:'x => x.color == \"#AFAFAF\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tbodyHexcolorCode : {\r\n\t\t\t\thexColor :  {message:'Please enter the right format of hexcode for body like \"#AFAFAF\"',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var hexcolorInfo = {\r\n\t\t\tcolor:'', footerHexCode:'', headerHexcolorCode:'', bodyHexcolorCode:'', \r\n\t\t}\r\n\t\tthis.hexcolorInfoFormGroup = this.formBuilder.group(hexcolorInfo,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"hexcolorInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Color Picker</label>\r\n\t\t<input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Footer Hexcode' or 'Header Hexcode', then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.color.errors\">{{hexcolorInfoFormGroup.controls.color.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Footer Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"footerHexCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation of hex color validation on 'Footer Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.footerHexCode.errors\">{{hexcolorInfoFormGroup.controls.footerHexCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Header Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"headerHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Header Hexcode' then you need to add 'Color Picker' input as '#AFAFAF'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.headerHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.headerHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Body Hexcode</label>\r\n\t\t<input type=\"text\" formControlName=\"bodyHexcolorCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors\">{{hexcolorInfoFormGroup.controls.bodyHexcolorCode.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!hexcolorInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-hexColor-add-validator',\r\n    templateUrl: './hex-color-add.component.html'\r\n})\r\nexport class HexColorAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcolor:['', RxwebValidators.hexColor()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Color Picker</label>\r\n\t\t<input type=\"text\" formControlName=\"color\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.color.errors\">{{userFormGroup.controls.color.errors.hexColor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}