{"dividendExample":"","fieldNameExample":"","conditionalExpressionExampleFunction":"","conditionalExpressionExampleString":"","messageExample":"","complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-complete-validator',\r\n    templateUrl: './factor-complete.component.html'\r\n})\r\nexport class FactorCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>{ return  x.firstNumber == 25 } })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthirdNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:x => x.firstNumber == 25 })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfourthNumber:['',RxwebValidators.factor({dividend:50  ,message:'{{0}} is not a factor of 50' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Fourth Number</label>\r\n    <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"fieldName":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-fieldName-validator',\r\n    templateUrl: './factor-field-name.component.html'\r\n})\r\nexport class FactorFieldNameValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthirdNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:x => x.firstNumber == 25 })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsecondNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>{ return  x.firstNumber == 25 } })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-conditionalExpression-validator',\r\n    templateUrl: './factor-conditional-expression.component.html'\r\n})\r\nexport class FactorConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthirdNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:x => x.firstNumber == 25 })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsecondNumber:['',RxwebValidators.factor({fieldName:\"firstNumber\"  ,conditionalExpression:(x,y) =>{ return  x.firstNumber == 25 } })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"dividend":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-dividend-validator',\r\n    templateUrl: './factor-dividend.component.html'\r\n})\r\nexport class FactorDividendValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\tfourthNumber:['',RxwebValidators.factor({dividend:50  ,message:'{{0}} is not a factor of 50' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Fourth Number</label>\r\n    <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-message-validator',\r\n    templateUrl: './factor-message.component.html'\r\n})\r\nexport class FactorMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\tfourthNumber:['',RxwebValidators.factor({dividend:50  ,message:'{{0}} is not a factor of 50' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Fourth Number</label>\r\n    <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-dynamic-validator',\r\n    templateUrl: './factor-dynamic.component.html'\r\n})\r\nexport class FactorDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tsecondNumber : {\r\n\t\t\t\tfactor :  {fieldName:\"firstNumber\",conditionalExpression:(x,y) =>{ return  x.firstNumber == 25 },} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tthirdNumber : {\r\n\t\t\t\tfactor :  {fieldName:\"firstNumber\",conditionalExpression:x => x.firstNumber == 25,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tfourthNumber : {\r\n\t\t\t\tfactor :  {dividend:50,message:'{{0}} is not a factor of 50',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tsecondNumber:'', thirdNumber:'', fourthNumber:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Number' or 'Third Number', then you need to add 'First Number' input as '25'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Second Number</label>\r\n    <input type=\"text\" formControlName=\"secondNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.secondNumber.errors\">{{userFormGroup.controls.secondNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Third Number</label>\r\n    <input type=\"text\" formControlName=\"thirdNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of factor on 'Fourth Number' field, then enter the value '25' in 'First Number' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.thirdNumber.errors\">{{userFormGroup.controls.thirdNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Fourth Number</label>\r\n    <input type=\"text\" formControlName=\"fourthNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only factors of 50<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fourthNumber.errors\">{{userFormGroup.controls.fourthNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-factor-add-validator',\r\n    templateUrl: './factor-add.component.html'\r\n})\r\nexport class FactorAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\tfirstNumber:['',RxwebValidators.factor({dividend:50 })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Number</label>\r\n    <input type=\"text\" formControlName=\"firstNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You can only enter factors of 50<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstNumber.errors\">{{userFormGroup.controls.firstNumber.errors.factor.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}