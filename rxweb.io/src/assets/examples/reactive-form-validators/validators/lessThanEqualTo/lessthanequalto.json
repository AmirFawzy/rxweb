{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-complete-validator',\r\n    templateUrl: './less-than-equal-to-complete.component.html'\r\n})\r\nexport class LessThanEqualToCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalMarks:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tobtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\totherMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"fieldName":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-fieldName-validator',\r\n    templateUrl: './less-than-equal-to-field-name.component.html'\r\n})\r\nexport class LessThanEqualToFieldNameValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalMarks:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tobtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"fieldNameExample":{"Notes":[],"Component":"","Html":"","Model":"practicalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], "},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-conditionalExpression-validator',\r\n    templateUrl: './less-than-equal-to-conditional-expression.component.html'\r\n})\r\nexport class LessThanEqualToConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalMarks:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tobtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'> conditionalExpression </span> with <span class='highlighted'>Function</span> object."],"Component":"","Html":"","Model":"obtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'> conditionalExpression </span> with <span class='highlighted'>Function</span> object."],"Component":"","Html":"","Model":"obtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-message-validator',\r\n    templateUrl: './less-than-equal-to-message.component.html'\r\n})\r\nexport class LessThanEqualToMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalMarks:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpracticalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\totherMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"otherMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-dynamic-validator',\r\n    templateUrl: './less-than-equal-to-dynamic.component.html'\r\n})\r\nexport class LessThanEqualToDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tobtainedMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',conditionalExpression:(x,y) => x.totalMarks == 100 ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tpracticalExamMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',conditionalExpression:'x => x.totalMarks == 100',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\totherMarks : {\r\n\t\t\t\tlessThanEqualTo :  {fieldName:'totalMarks',message:'Please enter number less than 100.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\ttotalMarks:'', obtainedMarks:'', practicalExamMarks:'', otherMarks:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Obtained Marks</label>\r\n    <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Practical Exam Marks</label>\r\n    <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Marks</label>\r\n    <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-add-validator',\r\n    templateUrl: './less-than-equal-to-add.component.html'\r\n})\r\nexport class LessThanEqualToAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalMarks:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Marks</label>\r\n    <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Marks</label>\r\n    <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This is checking less than equal to validation for  Marks must be less than equal to Total Marks.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThanEqualTo.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}