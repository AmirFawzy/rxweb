{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-complete-validator',\r\n    templateUrl: './pattern-complete.component.html'\r\n})\r\nexport class PatternCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n            zipCode:['', RxwebValidators.pattern({pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') }  ,message:'Zipcode must be 5 digits' })], \r\n            contactNumber:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  })], \r\n            age:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not and it shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"pattern":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-pattern-validator',\r\n    templateUrl: './pattern-pattern.component.html'\r\n})\r\nexport class PatternPatternValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"patternExample":{"Notes":[],"Component":"","Html":"","Model":"            userName:['', RxwebValidators.pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-message-validator',\r\n    templateUrl: './pattern-message.component.html'\r\n})\r\nexport class PatternMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            zipCode:['', RxwebValidators.pattern({pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') }  ,message:'Zipcode must be 5 digits' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not and it shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            zipCode:['', RxwebValidators.pattern({pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') }  ,message:'Zipcode must be 5 digits' })], "},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-conditionalExpression-validator',\r\n    templateUrl: './pattern-conditional-expression.component.html'\r\n})\r\nexport class PatternConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n            age:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' })], \r\n            contactNumber:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            age:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            contactNumber:['', RxwebValidators.pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-dynamic-validator',\r\n    templateUrl: './pattern-dynamic.component.html'\r\n})\r\nexport class PatternDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tuserName : {\r\n\t\t\t\tpattern : {pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')},} \r\n\t\t\t},\t\t\t\r\n\t\t\tzipCode : {\r\n\t\t\t\tpattern : {pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') },message:'Zipcode must be 5 digits',} \r\n\t\t\t},\t\t\t\r\n\t\t\tage : {\r\n\t\t\t\tpattern : {pattern:{'onlyDigit': RegExp('/^[0-9]*$/')},conditionalExpression:'x => x.userName==\"Bharat\"',} \r\n\t\t\t},\r\n\t\t};\r\n\t\tvar user = { userName:'', zipCode:'', contactNumber:'', age:'',  }\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not and it shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-add-validator',\r\n    templateUrl: './pattern-add.component.html'\r\n})\r\nexport class PatternAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null}}