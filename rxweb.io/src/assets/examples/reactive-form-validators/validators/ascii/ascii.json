{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ascii-complete-validator',\r\n    templateUrl: './ascii-complete.component.html'\r\n})\r\nexport class AsciiCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tlanguage:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnumberAsciiCode:['', RxwebValidators.ascii({conditionalExpression:(x,y) => x.language == \"Java\"  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\talphabetAsciiCode:['', RxwebValidators.ascii({conditionalExpression:'x => x.language ==\"Java\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tspecialCharAsciiCode:['', RxwebValidators.ascii({message:'{{0}} is not an Ascii Code' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ascii-conditionalExpression-validator',\r\n    templateUrl: './ascii-conditional-expression.component.html'\r\n})\r\nexport class AsciiConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tlanguage:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\talphabetAsciiCode:['', RxwebValidators.ascii({conditionalExpression:'x => x.language ==\"Java\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnumberAsciiCode:['', RxwebValidators.ascii({conditionalExpression:(x,y) => x.language == \"Java\"  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"alphabetAsciiCode:['', RxwebValidators.ascii({conditionalExpression:'x => x.language ==\"Java\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"numberAsciiCode:['', RxwebValidators.ascii({conditionalExpression:(x,y) => x.language == \"Java\"  })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ascii-message-validator',\r\n    templateUrl: './ascii-message.component.html'\r\n})\r\nexport class AsciiMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tspecialCharAsciiCode:['', RxwebValidators.ascii({message:'{{0}} is not an Ascii Code' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"specialCharAsciiCode:['', RxwebValidators.ascii({message:'{{0}} is not an Ascii Code' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ascii-dynamic-validator',\r\n    templateUrl: './ascii-dynamic.component.html'\r\n})\r\nexport class AsciiDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tnumberAsciiCode : {\r\n\t\t\t\tascii :  {conditionalExpression:(x,y) => x.language == \"Java\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\talphabetAsciiCode : {\r\n\t\t\t\tascii :  {conditionalExpression:'x => x.language ==\"Java\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tspecialCharAsciiCode : {\r\n\t\t\t\tascii :  {message:'{{0}} is not an Ascii Code',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tlanguage:'', numberAsciiCode:'', alphabetAsciiCode:'', specialCharAsciiCode:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Language</label>\r\n    <input type=\"text\" formControlName=\"language\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' or 'Alphabet Ascii Code', then you need to add 'Language' input as 'Java'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.language.errors\">{{userFormGroup.controls.language.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"numberAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.numberAsciiCode.errors\">{{userFormGroup.controls.numberAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Alphabet Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"alphabetAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Alphabet Ascii Code' then you need to add 'Language' input as 'Java'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alphabetAsciiCode.errors\">{{userFormGroup.controls.alphabetAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">enter Ascii Code only<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ascii-add-validator',\r\n    templateUrl: './ascii-add.component.html'\r\n})\r\nexport class AsciiAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tspecialCharAsciiCode:['', RxwebValidators.ascii()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Special Charscter Ascii Code</label>\r\n    <input type=\"text\" formControlName=\"specialCharAsciiCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">You must enter an Ascii Code only<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.specialCharAsciiCode.errors\">{{userFormGroup.controls.specialCharAsciiCode.errors.ascii.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}