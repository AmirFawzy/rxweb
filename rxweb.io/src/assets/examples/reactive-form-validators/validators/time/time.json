{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-complete-validator',\r\n    templateUrl: './time-complete.component.html'\r\n})\r\nexport class TimeCompleteValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tentryPlace:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttotalIn:['', RxwebValidators.time({conditionalExpression:(x,y) => x.entryPlace == \"Lunch Room\"  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tentryTime:['', RxwebValidators.time({conditionalExpression:'x => x.entryPlace == \"Lunch Room\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttotalOutTime:['', RxwebValidators.time({allowSeconds:true })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\texitTime:['', RxwebValidators.time({message:'You can enter only time format data' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Entry Place</label>\r\n\t\t<input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Total In' or 'Entry Time', then you need to add 'Entry Place' input as 'Lunch Room'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Total In</label>\r\n\t\t<input type=\"text\" formControlName=\"totalIn\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalIn.errors\">{{attandanceDetailFormGroup.controls.totalIn.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Entry Time</label>\r\n\t\t<input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Total Time Out</label>\r\n\t\t<input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Allow seconds.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Exit Time</label>\r\n\t\t<input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-conditionalExpression-validator',\r\n    templateUrl: './time-conditional-expression.component.html'\r\n})\r\nexport class TimeConditionalExpressionValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tentryPlace:['',], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tentryTime:['', RxwebValidators.time({conditionalExpression:'x => x.entryPlace == \"Lunch Room\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttotalIn:['', RxwebValidators.time({conditionalExpression:(x,y) => x.entryPlace == \"Lunch Room\"  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Entry Place</label>\r\n\t\t<input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Total In' or 'Entry Time', then you need to add 'Entry Place' input as 'Lunch Room'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Entry Time</label>\r\n\t\t<input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Total In</label>\r\n\t\t<input type=\"text\" formControlName=\"totalIn\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalIn.errors\">{{attandanceDetailFormGroup.controls.totalIn.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"entryTime:['', RxwebValidators.time({conditionalExpression:'x => x.entryPlace == \"Lunch Room\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"totalIn:['', RxwebValidators.time({conditionalExpression:(x,y) => x.entryPlace == \"Lunch Room\"  })], "},"allowSeconds":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-allowSeconds-validator',\r\n    templateUrl: './time-allow-seconds.component.html'\r\n})\r\nexport class TimeAllowSecondsValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\ttotalOutTime:['', RxwebValidators.time({allowSeconds:true })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Total Time Out</label>\r\n\t\t<input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Allow seconds.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"allowSecondsExample":{"Notes":[],"Component":"","Html":"","Model":"totalOutTime:['', RxwebValidators.time({allowSeconds:true })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-message-validator',\r\n    templateUrl: './time-message.component.html'\r\n})\r\nexport class TimeMessageValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\texitTime:['', RxwebValidators.time({message:'You can enter only time format data' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Exit Time</label>\r\n\t\t<input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"exitTime:['', RxwebValidators.time({message:'You can enter only time format data' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-dynamic-validator',\r\n    templateUrl: './time-dynamic.component.html'\r\n})\r\nexport class TimeDynamicValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\ttotalIn : {\r\n\t\t\t\ttime :  {conditionalExpression:(x,y) => x.entryPlace == \"Lunch Room\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tentryTime : {\r\n\t\t\t\ttime :  {conditionalExpression:'x => x.entryPlace == \"Lunch Room\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\ttotalOutTime : {\r\n\t\t\t\ttime :  {allowSeconds:true,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\texitTime : {\r\n\t\t\t\ttime :  {message:'You can enter only time format data',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var attandanceDetail = {\r\n\t\t\tentryPlace:'', totalIn:'', entryTime:'', totalOutTime:'', exitTime:'', \r\n\t\t}\r\n\t\tthis.attandanceDetailFormGroup = this.formBuilder.group(attandanceDetail,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Entry Place</label>\r\n\t\t<input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Total In' or 'Entry Time', then you need to add 'Entry Place' input as 'Lunch Room'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Total In</label>\r\n\t\t<input type=\"text\" formControlName=\"totalIn\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalIn.errors\">{{attandanceDetailFormGroup.controls.totalIn.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Entry Time</label>\r\n\t\t<input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">To apply the validation of time on 'Entry Time' field, then enter the value of 'Lunch Room' in Entry Place textbox.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Total Time Out</label>\r\n\t\t<input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Allow seconds.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.time.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Exit Time</label>\r\n\t\t<input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-time-add-validator',\r\n    templateUrl: './time-add.component.html'\r\n})\r\nexport class TimeAddValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tentryTime:['', RxwebValidators.time()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"attandanceDetailFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Entry Time</label>\r\n\t\t<input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.time.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}