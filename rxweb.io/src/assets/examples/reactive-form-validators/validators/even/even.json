{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-complete-validator',\r\n    templateUrl: './even-complete.component.html'\r\n})\r\nexport class EvenCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            type:['',], \r\n            number:['', RxwebValidators.even({conditionalExpression:(x,y) => x.type == \"Even\"  })], \r\n            evenNumber:['', RxwebValidators.even({conditionalExpression:'x => x.type == \"Even\"' })], \r\n            multiplesOfEvenNumber:['', RxwebValidators.even({message:'{{0}} is not an even number' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-conditionalExpression-validator',\r\n    templateUrl: './even-conditional-expression.component.html'\r\n})\r\nexport class EvenConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            type:['',], \r\n            evenNumber:['', RxwebValidators.even({conditionalExpression:'x => x.type == \"Even\"' })], \r\n            number:['', RxwebValidators.even({conditionalExpression:(x,y) => x.type == \"Even\"  })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            evenNumber:['', RxwebValidators.even({conditionalExpression:'x => x.type == \"Even\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            number:['', RxwebValidators.even({conditionalExpression:(x,y) => x.type == \"Even\"  })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-message-validator',\r\n    templateUrl: './even-message.component.html'\r\n})\r\nexport class EvenMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            multiplesOfEvenNumber:['', RxwebValidators.even({message:'{{0}} is not an even number' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            multiplesOfEvenNumber:['', RxwebValidators.even({message:'{{0}} is not an even number' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-dynamic-validator',\r\n    templateUrl: './even-dynamic.component.html'\r\n})\r\nexport class EvenDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tevenNumber : {\r\n\t\t\t\teven : {conditionalExpression:'x => x.type == \"Even\"',} \r\n\t\t\t},\t\t\t\r\n\t\t\tmultiplesOfEvenNumber : {\r\n\t\t\t\teven : {message:'{{0}} is not an even number',} \r\n\t\t\t},\r\n\t\t};\r\n\t\tvar user = { type:'', number:'', evenNumber:'', multiplesOfEvenNumber:'',  }\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-add-validator',\r\n    templateUrl: './even-add.component.html'\r\n})\r\nexport class EvenAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            evenNumber:['', RxwebValidators.even()], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null}}