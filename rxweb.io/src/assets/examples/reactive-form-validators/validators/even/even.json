{"conditionalExpressionExampleFunction":"","conditionalExpressionExampleString":"","messageExample":"","complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-complete-validator',\r\n    templateUrl: './even-complete.component.html'\r\n})\r\nexport class EvenCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumber:['',RxwebValidators.even({conditionalExpression:(x,y) =>{ return  x.type == \"Even\" } })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tevenNumber:['',RxwebValidators.even({conditionalExpression:x => x.type == \"Even\" })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmultiplesOfEvenNumber:['',RxwebValidators.even({message:'{{0}} is not an even number' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Type</label>\r\n    <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number</label>\r\n    <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Even Number</label>\r\n    <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Multiples of Even Number</label>\r\n    <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-conditionalExpression-validator',\r\n    templateUrl: './even-conditional-expression.component.html'\r\n})\r\nexport class EvenConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevenNumber:['',RxwebValidators.even({conditionalExpression:x => x.type == \"Even\" })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnumber:['',RxwebValidators.even({conditionalExpression:(x,y) =>{ return  x.type == \"Even\" } })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Type</label>\r\n    <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Even Number</label>\r\n    <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number</label>\r\n    <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-message-validator',\r\n    templateUrl: './even-message.component.html'\r\n})\r\nexport class EvenMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\tmultiplesOfEvenNumber:['',RxwebValidators.even({message:'{{0}} is not an even number' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Multiples of Even Number</label>\r\n    <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-dynamic-validator',\r\n    templateUrl: './even-dynamic.component.html'\r\n})\r\nexport class EvenDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tnumber : {\r\n\t\t\t\teven :  {conditionalExpression:(x,y) =>{ return  x.type == \"Even\" },} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tevenNumber : {\r\n\t\t\t\teven :  {conditionalExpression:x => x.type == \"Even\",} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tmultiplesOfEvenNumber : {\r\n\t\t\t\teven :  {message:'{{0}} is not an even number',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tnumber:'', evenNumber:'', multiplesOfEvenNumber:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Type</label>\r\n    <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Number</label>\r\n    <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Even Number</label>\r\n    <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Multiples of Even Number</label>\r\n    <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators \r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-even-add-validator',\r\n    templateUrl: './even-add.component.html'\r\n})\r\nexport class EvenAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.formGroup({\r\n\t\t\t\t\t\t\t\t\t\tevenNumber:['',RxwebValidators.even()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Even Number</label>\r\n    <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}