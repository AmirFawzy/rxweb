{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-complete-validator',\r\n    templateUrl: './alpha-complete.component.html'\r\n})\r\nexport class AlphaCompleteValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcountryName:['', RxwebValidators.alpha()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"Australia\" })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"Australia\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n\t\t<input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Country Code</label>\r\n\t\t<input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>City</label>\r\n\t\t<input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Name</label>\r\n\t\t<input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Code</label>\r\n\t\t<input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-conditionalExpression-validator',\r\n    templateUrl: './alpha-conditional-expression.component.html'\r\n})\r\nexport class AlphaConditionalExpressionValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcountryName:['', RxwebValidators.alpha()], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"Australia\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcountryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"Australia\" })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n\t\t<input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>City</label>\r\n\t\t<input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Country Code</label>\r\n\t\t<input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"cityName:['', RxwebValidators.alpha({conditionalExpression:'x => x.countryName ==\"Australia\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"countryCode:['', RxwebValidators.alpha({conditionalExpression:(x,y) => x.countryName == \"Australia\" })], "},"allowWhiteSpace":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-allowWhiteSpace-validator',\r\n    templateUrl: './alpha-allow-white-space.component.html'\r\n})\r\nexport class AlphaAllowWhiteSpaceValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tstateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>State Name</label>\r\n\t\t<input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"allowWhiteSpaceExample":{"Notes":[],"Component":"","Html":"","Model":"stateName:['', RxwebValidators.alpha({allowWhiteSpace:true })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-message-validator',\r\n    templateUrl: './alpha-message.component.html'\r\n})\r\nexport class AlphaMessageValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tstateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>State Code</label>\r\n\t\t<input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"stateCode:['', RxwebValidators.alpha({message:'You can enter only alphabets.' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-dynamic-validator',\r\n    templateUrl: './alpha-dynamic.component.html'\r\n})\r\nexport class AlphaDynamicValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tcountryName : {\r\n\t\t\t\talpha : true  \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tcountryCode : {\r\n\t\t\t\talpha :  {conditionalExpression:(x,y) => x.countryName == \"Australia\",} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tcityName : {\r\n\t\t\t\talpha :  {conditionalExpression:'x => x.countryName ==\"Australia\"',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tstateName : {\r\n\t\t\t\talpha :  {allowWhiteSpace:true,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tstateCode : {\r\n\t\t\t\talpha :  {message:'You can enter only alphabets.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var addressInfo = {\r\n\t\t\tcountryName:'', countryCode:'', cityName:'', stateName:'', stateCode:'', \r\n\t\t}\r\n\t\tthis.addressInfoFormGroup = this.formBuilder.group(addressInfo,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n\t\t<input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Country Code</label>\r\n\t\t<input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>City</label>\r\n\t\t<input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Name</label>\r\n\t\t<input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Code</label>\r\n\t\t<input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-alpha-add-validator',\r\n    templateUrl: './alpha-add.component.html'\r\n})\r\nexport class AlphaAddValidatorComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.countryFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tcountryName:['', RxwebValidators.alpha()], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"countryFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n\t\t<input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}