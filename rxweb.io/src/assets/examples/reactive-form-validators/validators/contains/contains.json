{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-complete-validator',\r\n    templateUrl: './contains-complete.component.html'\r\n})\r\nexport class ContainsCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            emailAddress:['', RxwebValidators.contains({value:'@gmail.com' })], \r\n            businessEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:(x,y) => x.emailAddress == \"abc@gmail.com\" })], \r\n            recoveryEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"' })], \r\n            otherEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,message:'Please enter valid gmailId' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Email Address</label>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' or 'Business Email Address' then you need to add this input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.emailAddress.errors\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Business Email Address</label>\r\n      <input type=\"text\" formControlName=\"businessEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Business Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.businessEmailAddress.errors\">{{userFormGroup.controls.businessEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Recovery Email Address</label>\r\n      <input type=\"text\" formControlName=\"recoveryEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.recoveryEmailAddress.errors\">{{userFormGroup.controls.recoveryEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Email Address</label>\r\n      <input type=\"text\" formControlName=\"otherEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherEmailAddress.errors\">{{userFormGroup.controls.otherEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"value":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-value-validator',\r\n    templateUrl: './contains-value.component.html'\r\n})\r\nexport class ContainsValueValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            emailAddress:['', RxwebValidators.contains({value:'@gmail.com' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Email Address</label>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' or 'Business Email Address' then you need to add this input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.emailAddress.errors\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"valueExample":{"Notes":[],"Component":"","Html":"","Model":"            emailAddress:['', RxwebValidators.contains({value:'@gmail.com' })], "},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-conditionalExpression-validator',\r\n    templateUrl: './contains-conditional-expression.component.html'\r\n})\r\nexport class ContainsConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            emailAddress:['', RxwebValidators.contains({value:'@gmail.com' })], \r\n            recoveryEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"' })], \r\n            businessEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:(x,y) => x.emailAddress == \"abc@gmail.com\" })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Email Address</label>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' or 'Business Email Address' then you need to add this input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.emailAddress.errors\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Recovery Email Address</label>\r\n      <input type=\"text\" formControlName=\"recoveryEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.recoveryEmailAddress.errors\">{{userFormGroup.controls.recoveryEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Business Email Address</label>\r\n      <input type=\"text\" formControlName=\"businessEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Business Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.businessEmailAddress.errors\">{{userFormGroup.controls.businessEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"            recoveryEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"            businessEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,conditionalExpression:(x,y) => x.emailAddress == \"abc@gmail.com\" })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-message-validator',\r\n    templateUrl: './contains-message.component.html'\r\n})\r\nexport class ContainsMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            otherEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,message:'Please enter valid gmailId' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Other Email Address</label>\r\n      <input type=\"text\" formControlName=\"otherEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherEmailAddress.errors\">{{userFormGroup.controls.otherEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"            otherEmailAddress:['', RxwebValidators.contains({value:'@gmail.com'  ,message:'Please enter valid gmailId' })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-dynamic-validator',\r\n    templateUrl: './contains-dynamic.component.html'\r\n})\r\nexport class ContainsDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\temailAddress : {\r\n\t\t\t\tcontains : {value:'@gmail.com',} \r\n\t\t\t},\t\t\t\r\n\t\t\trecoveryEmailAddress : {\r\n\t\t\t\tcontains : {value:'@gmail.com',conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"',} \r\n\t\t\t},\t\t\t\r\n\t\t\totherEmailAddress : {\r\n\t\t\t\tcontains : {value:'@gmail.com',message:'Please enter valid gmailId',} \r\n\t\t\t},\r\n\t\t};\r\n\t\tvar user = { emailAddress:'', businessEmailAddress:'', recoveryEmailAddress:'', otherEmailAddress:'',  }\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Email Address</label>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' or 'Business Email Address' then you need to add this input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.emailAddress.errors\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Recovery Email Address</label>\r\n      <input type=\"text\" formControlName=\"recoveryEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.recoveryEmailAddress.errors\">{{userFormGroup.controls.recoveryEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Email Address</label>\r\n      <input type=\"text\" formControlName=\"otherEmailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherEmailAddress.errors\">{{userFormGroup.controls.otherEmailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-contains-add-validator',\r\n    templateUrl: './contains-add.component.html'\r\n})\r\nexport class ContainsAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            emailAddress:['', RxwebValidators.contains({value:'@gmail.com' })], \r\n        });\r\n    }\r\n}\r\n","Html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Email Address</label>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.emailAddress.errors\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","Model":null}}