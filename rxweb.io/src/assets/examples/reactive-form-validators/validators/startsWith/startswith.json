{"complete":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-complete-validator',\r\n    templateUrl: './starts-with-complete.component.html'\r\n})\r\nexport class StartsWithCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tname:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tprofession:['', RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttaskId:['', RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n\t\t<input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n\t\t<input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"value":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-value-validator',\r\n    templateUrl: './starts-with-value.component.html'\r\n})\r\nexport class StartsWithValueValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tname:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"valueExample":{"Notes":[],"Component":"","Html":"","Model":"name:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], "},"message":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-message-validator',\r\n    templateUrl: './starts-with-message.component.html'\r\n})\r\nexport class StartsWithMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tname:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"messageExample":{"Notes":[],"Component":"","Html":"","Model":"name:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], "},"conditionalExpression":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-conditionalExpression-validator',\r\n    templateUrl: './starts-with-conditional-expression.component.html'\r\n})\r\nexport class StartsWithConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tname:['', RxwebValidators.startsWith({value:'J'  ,message:'{{0}} does not starts with `J`' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttaskId:['', RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' })], \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tprofession:['', RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n\t\t<input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n\t\t<input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"conditionalExpressionExampleString":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> string</span> object."],"Component":null,"Html":null,"Model":"taskId:['', RxwebValidators.startsWith({value:'#'  ,conditionalExpression:'x => x.name ==\"Bharat\"' })], "},"conditionalExpressionExampleFunction":{"Notes":["Binding <span class='highlighted'>conditionalExpression </span> with <span class='highlighted'> Function</span> object."],"Component":null,"Html":null,"Model":"profession:['', RxwebValidators.startsWith({value:'Senior'  ,conditionalExpression:(x,y) => x.name == \"Bharat\"  })], "},"dynamic":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-dynamic-validator',\r\n    templateUrl: './starts-with-dynamic.component.html'\r\n})\r\nexport class StartsWithDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tname : {\r\n\t\t\t\tstartsWith :  {value:'J',message:'{{0}} does not starts with `J`',} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tprofession : {\r\n\t\t\t\tstartsWith :  {value:'Senior',conditionalExpression:(x,y) => x.name == \"Bharat\" ,} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\ttaskId : {\r\n\t\t\t\tstartsWith :  {value:'#',conditionalExpression:'x => x.name ==\"Bharat\"',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\t var user = {\r\n\t\t\tname:'', profession:'', taskId:'', \r\n\t\t}\r\n\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Profession</label>\r\n\t\t<input type=\"text\" formControlName=\"profession\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with 'Senior'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.profession.errors\">{{userFormGroup.controls.profession.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Task Id</label>\r\n\t\t<input type=\"text\" formControlName=\"taskId\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with '#'<br/></small>\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.taskId.errors\">{{userFormGroup.controls.taskId.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null},"add":{"Notes":[],"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder,RxwebValidators\r\n} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-startsWith-add-validator',\r\n    templateUrl: './starts-with-add.component.html'\r\n})\r\nexport class StartsWithAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\t\t\t\t\t\r\n\t    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n\t\t\t\t\t\t\t\t\t\tname:['', RxwebValidators.startsWith({value:'n' })], \r\n\t\t\t\t\t\t\t\t});\r\n    }\r\n}\r\n","Html":"<div>\r\n<form  [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n\t\t<input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n\t    <small class=\"form-text text-muted\">You can enter value which starts with 'n'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.startsWith.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":null}}