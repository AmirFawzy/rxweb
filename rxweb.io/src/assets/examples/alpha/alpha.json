{"complete":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-complete',\r\n    templateUrl: './alpha-complete.component.html'\r\n})\r\nexport class AlphaCompleteComponent implements OnInit {\r\n\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"addressInfoFormGroup\" [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n    <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add this input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Country Code</label>\r\n    <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Name</label>\r\n    <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>State Code</label>\r\n    <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n\t@alpha({conditionalExpressions:(x, y) => x.countryName == \"Australia\"  }) \r\n\tcountryCode: string;\r\n\r\n\t@alpha({allowWhiteSpace:true }) \r\n\tstateName: string;\r\n\r\n\t@alpha({message:'You can enter only alphabets.' }) \r\n\tstateCode: string;\r\n\r\n}\r\n"},"conditionalExpressions":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-conditionalExpressions',\r\n    templateUrl: './alpha-conditional-expressions.component.html'\r\n})\r\nexport class AlphaConditionalExpressionsComponent implements OnInit {\r\n\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"addressInfoFormGroup\" [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n    <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add this input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Country Code</label>\r\n    <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'Australia'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n\t@alpha({conditionalExpressions:(x, y) => x.countryName == \"Australia\"  }) \r\n\tcountryCode: string;\r\n\r\n}\r\n"},"allowWhiteSpace":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-allowWhiteSpace',\r\n    templateUrl: './alpha-allow-white-space.component.html'\r\n})\r\nexport class AlphaAllowWhiteSpaceComponent implements OnInit {\r\n\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"addressInfoFormGroup\" [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>State Name</label>\r\n    <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha({allowWhiteSpace:true }) \r\n\tstateName: string;\r\n\r\n}\r\n"},"message":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-message',\r\n    templateUrl: './alpha-message.component.html'\r\n})\r\nexport class AlphaMessageComponent implements OnInit {\r\n\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"addressInfoFormGroup\" [formGroup]=\"addressInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>State Code</label>\r\n    <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha({message:'You can enter only alphabets.' }) \r\n\tstateCode: string;\r\n\r\n}\r\n"},"add":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-add',\r\n    templateUrl: './alpha-add.component.html'\r\n})\r\nexport class AlphaAddComponent implements OnInit {\r\n\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.countryFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"countryFormGroup\" [formGroup]=\"countryFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n    <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n}\r\n"},"edit":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-edit',\r\n    templateUrl: './alpha-edit.component.html'\r\n})\r\nexport class AlphaEditComponent implements OnInit {\r\n\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/alpha/edit/country-data.json').subscribe(country => {\r\n            this.countryFormGroup = this.formBuilder.formGroup<Country>(Country,country);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"countryFormGroup\" [formGroup]=\"countryFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Country Name</label>\r\n    <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  alpha,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n}\r\n"}}