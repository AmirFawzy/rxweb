{"complete":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-leapYear-complete',\r\n    templateUrl: './leap-year-complete.component.html'\r\n})\r\nexport class LeapYearCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Birth Year' or 'Admission Date', then you need to add 'Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Birth Year</label>\r\n    <input type=\"text\" formControlName=\"birthYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of Leap Year on 'Birth Year' field, then enter the value 'John' in 'Name' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.birthYear.errors\">{{userFormGroup.controls.birthYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Admission Year</label>\r\n    <input type=\"text\" formControlName=\"admissionYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of leap on 'Admission Year' field, then enter the value 'John' in 'Name' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.admissionYear.errors\">{{userFormGroup.controls.admissionYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Joining Year</label>\r\n    <input type=\"text\" formControlName=\"joiningYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only a leap year<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.joiningYear.errors\">{{userFormGroup.controls.joiningYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  leapYear,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@leapYear({conditionalExpression:(x,y) =>{ return  x.name == \"John\" } }) \r\n\tbirthYear: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@leapYear({conditionalExpression:x => x.name == \"John\" }) \r\n\tadmissionYear: Date;\r\n\r\n\t@leapYear({message:'{{0}} is not a leap year' }) \r\n\tjoiningYear: number;\r\n\r\n}\r\n"},"conditionalExpression":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-leapYear-conditionalExpression',\r\n    templateUrl: './leap-year-conditional-expression.component.html'\r\n})\r\nexport class LeapYearConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Birth Year' or 'Admission Date', then you need to add 'Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Admission Year</label>\r\n    <input type=\"text\" formControlName=\"admissionYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of leap on 'Admission Year' field, then enter the value 'John' in 'Name' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.admissionYear.errors\">{{userFormGroup.controls.admissionYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Birth Year</label>\r\n    <input type=\"text\" formControlName=\"birthYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">To apply the validation of Leap Year on 'Birth Year' field, then enter the value 'John' in 'Name' textbox<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.birthYear.errors\">{{userFormGroup.controls.birthYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  leapYear,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tname: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@leapYear({conditionalExpression:x => x.name == \"John\" }) \r\n\tadmissionYear: Date;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@leapYear({conditionalExpression:(x,y) =>{ return  x.name == \"John\" } }) \r\n\tbirthYear: number;\r\n\r\n}\r\n"},"message":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-leapYear-message',\r\n    templateUrl: './leap-year-message.component.html'\r\n})\r\nexport class LeapYearMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Joining Year</label>\r\n    <input type=\"text\" formControlName=\"joiningYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only a leap year<br/></small>\r\n    <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.joiningYear.errors\">{{userFormGroup.controls.joiningYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  leapYear,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@leapYear({message:'{{0}} is not a leap year' }) \r\n\tjoiningYear: number;\r\n\r\n}\r\n"},"add":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-leapYear-add',\r\n    templateUrl: './leap-year-add.component.html'\r\n})\r\nexport class LeapYearAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Birth Year</label>\r\n    <input type=\"text\" formControlName=\"birthYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only a leap year<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.birthYear.errors\">{{userFormGroup.controls.birthYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  leapYear,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@leapYear() \r\n\tbirthYear: number;\r\n\r\n}\r\n"},"edit":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-leapYear-edit',\r\n    templateUrl: './leap-year-edit.component.html'\r\n})\r\nexport class LeapYearEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/leapYear/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Birth Year</label>\r\n    <input type=\"text\" formControlName=\"birthYear\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">you can enter only a leap year<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.birthYear.errors\">{{userFormGroup.controls.birthYear.errors.leapYear.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  leapYear,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@leapYear() \r\n\tbirthYear: number;\r\n\r\n}\r\n"}}