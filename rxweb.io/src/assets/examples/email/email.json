{"complete":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-email-complete',\r\n    templateUrl: './email-complete.component.html'\r\n})\r\nexport class EmailCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Email</label>\r\n    <input type=\"text\" formControlName=\"email\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add this input to 'abc@gmail.com'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.email.errors\">{{userFormGroup.controls.email.errors.email.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Recovery Email Address</label>\r\n    <input type=\"text\" formControlName=\"recoveryEmailAddress\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'email' field input to 'abc@gmail.com'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.recoveryEmailAddress.errors\">{{userFormGroup.controls.recoveryEmailAddress.errors.email.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Other Email Address</label>\r\n    <input type=\"text\" formControlName=\"otherEmailAddress\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherEmailAddress.errors\">{{userFormGroup.controls.otherEmailAddress.errors.email.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  email,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@email() \r\n\temail: string;\r\n\r\n\t@email({conditionalExpressions:(x,y) =>{ return  x.email == \"abc@gmail.com\" } }) \r\n\trecoveryEmailAddress: string;\r\n\r\n\t@email({message:'Please enter valid email' }) \r\n\totherEmailAddress: string;\r\n\r\n}\r\n"},"conditionalExpressions":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-email-conditionalExpressions',\r\n    templateUrl: './email-conditional-expressions.component.html'\r\n})\r\nexport class EmailConditionalExpressionsComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Email</label>\r\n    <input type=\"text\" formControlName=\"email\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add this input to 'abc@gmail.com'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.email.errors\">{{userFormGroup.controls.email.errors.email.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Recovery Email Address</label>\r\n    <input type=\"text\" formControlName=\"recoveryEmailAddress\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'email' field input to 'abc@gmail.com'.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.recoveryEmailAddress.errors\">{{userFormGroup.controls.recoveryEmailAddress.errors.email.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  email,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@email() \r\n\temail: string;\r\n\r\n\t@email({conditionalExpressions:(x,y) =>{ return  x.email == \"abc@gmail.com\" } }) \r\n\trecoveryEmailAddress: string;\r\n\r\n}\r\n"},"message":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-email-message',\r\n    templateUrl: './email-message.component.html'\r\n})\r\nexport class EmailMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Other Email Address</label>\r\n    <input type=\"text\" formControlName=\"otherEmailAddress\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherEmailAddress.errors\">{{userFormGroup.controls.otherEmailAddress.errors.email.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  email,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@email({message:'Please enter valid email' }) \r\n\totherEmailAddress: string;\r\n\r\n}\r\n"},"add":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-email-add',\r\n    templateUrl: './email-add.component.html'\r\n})\r\nexport class EmailAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Email</label>\r\n    <input type=\"text\" formControlName=\"email\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.email.errors\">{{userFormGroup.controls.email.errors.email.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  email,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@email() \r\n\temail: string;\r\n\r\n}\r\n"},"edit":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-email-edit',\r\n    templateUrl: './email-edit.component.html'\r\n})\r\nexport class EmailEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/email/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Email</label>\r\n    <input type=\"text\" formControlName=\"email\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.email.errors\">{{userFormGroup.controls.email.errors.email.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  email,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@email() \r\n\temail: string;\r\n\r\n}\r\n"}}