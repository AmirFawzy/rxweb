{"conditionalExpressionExampleFunction":{"Notes":["Binding `conditionalExpression` with `Function` object."],"Component":null,"Html":null,"Model":"\t@required({conditionalExpression:(x,y) =>{ return  x.firstName == \"John\" } }) \r\n\tmiddleName: string;"},"conditionalExpressionExampleString":{"Notes":["Binding `conditionalExpression` with `string` datatype."],"Component":null,"Html":null,"Model":"\t@required({conditionalExpression:x => x.firstName == \"John\" }) \r\n\tlastName: string;"},"messageExample":{"Notes":null,"Component":null,"Html":null,"Model":"\t@required({message:'Username cannot be blank.' }) \r\n\tuserName: string;"},"complete":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-required-complete',\r\n    templateUrl: './required-complete.component.html'\r\n})\r\nexport class RequiredCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@required() \r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@required({conditionalExpression:(x,y) =>{ return  x.firstName == \"John\" } }) \r\n\tmiddleName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@required({conditionalExpression:x => x.firstName == \"John\" }) \r\n\tlastName: string;\r\n\r\n\t@required({message:'Username cannot be blank.' }) \r\n\tuserName: string;\r\n\r\n}\r\n"},"conditionalExpression":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-required-conditionalExpression',\r\n    templateUrl: './required-conditional-expression.component.html'\r\n})\r\nexport class RequiredConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@required() \r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@required({conditionalExpression:x => x.firstName == \"John\" }) \r\n\tlastName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@required({conditionalExpression:(x,y) =>{ return  x.firstName == \"John\" } }) \r\n\tmiddleName: string;\r\n\r\n}\r\n"},"message":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-required-message',\r\n    templateUrl: './required-message.component.html'\r\n})\r\nexport class RequiredMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@required({message:'Username cannot be blank.' }) \r\n\tuserName: string;\r\n\r\n}\r\n"},"dynamic":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\r\n} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-required-dynamic',\r\n    templateUrl: './required-dynamic.component.html'\r\n})\r\nexport class RequiredDynamicComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n        formBuilderConfiguration.dynamicValidation = {\r\n\t\t\t\r\n\t\t\tfirstName : {\r\n\t\t\t\trequired : true  \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tmiddleName : {\r\n\t\t\t\trequired :  {conditionalExpression:(x,y) =>{ return  x.firstName == \"John\" },} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tlastName : {\r\n\t\t\t\trequired :  {conditionalExpression:x => x.firstName == \"John\",} \r\n\t\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\tuserName : {\r\n\t\t\t\trequired :  {message:'Username cannot be blank.',} \r\n\t\t\t},\r\n\t\t\t        };\r\n\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'John'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Middle Name</label>\r\n    <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Last Name</label>\r\n    <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Conditional Required Validation.<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'John'<br/></small>\r\n    <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.required.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>UserName</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@prop()\r\n\tmiddleName: string;\r\n\r\n\t@prop()\r\n\tlastName: string;\r\n\r\n\t@prop()\r\n\tuserName: string;\r\n\r\n}\r\n"},"add":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-required-add',\r\n    templateUrl: './required-add.component.html'\r\n})\r\nexport class RequiredAddComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@required() \r\n\tfirstName: string;\r\n\r\n}\r\n"},"edit":{"Notes":null,"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-required-edit',\r\n    templateUrl: './required-edit.component.html'\r\n})\r\nexport class RequiredEditComponent implements OnInit {\r\n\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/required/edit/user-info-data.json').subscribe(userInfo => {\r\n            this.userInfoFormGroup = this.formBuilder.formGroup<UserInfo>(UserInfo,userInfo);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form [formGroup]=\"userInfoFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>First Name</label>\r\n    <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errors.required.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  required,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@required() \r\n\tfirstName: string;\r\n\r\n}\r\n"}}