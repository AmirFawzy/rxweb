{"complete":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-complete',\r\n    templateUrl: './pattern-complete.component.html'\r\n})\r\nexport class PatternCompleteComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Zip Code</label>\r\n    <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not and it shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Age</label>\r\n    <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is John<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\t@pattern({pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') }  ,message:'Zipcode must be 5 digits' }) \r\n\tzipCode: string;\r\n\t@pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:x=>x.userName==\"John\" }) \r\n\tage: string;\r\n}\r\n"},"pattern":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-pattern',\r\n    templateUrl: './pattern-pattern.component.html'\r\n})\r\nexport class PatternPatternComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n}\r\n"},"message":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-message',\r\n    templateUrl: './pattern-message.component.html'\r\n})\r\nexport class PatternMessageComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>Zip Code</label>\r\n    <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not and it shows custom message<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'zipCode':RegExp('/^\\d{5}(?:[-\\s]\\d{4})?$/') }  ,message:'Zipcode must be 5 digits' }) \r\n\tzipCode: string;\r\n}\r\n"},"conditionalExpression":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-conditionalExpression',\r\n    templateUrl: './pattern-conditional-expression.component.html'\r\n})\r\nexport class PatternConditionalExpressionComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n</div>\r\n<div class=\"form-group\">\r\n    <label>Age</label>\r\n    <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is John<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\t@pattern({pattern:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:x=>x.userName==\"John\" }) \r\n\tage: string;\r\n}\r\n"},"add":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-add',\r\n    templateUrl: './pattern-add.component.html'\r\n})\r\nexport class PatternAddComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n}\r\n"},"edit":{"Component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-edit',\r\n    templateUrl: './pattern-edit.component.html'\r\n})\r\nexport class PatternEditComponent implements OnInit {\r\n\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,\t\tprivate http: HttpClient\r\n\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/pattern/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","Html":"<div>\r\n<form *ngIf=\"userFormGroup\" [formGroup]=\"userFormGroup\">\r\n<div class=\"form-group\">\r\n    <label>User Name</label>\r\n    <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n    <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n    <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n</div>\r\n<button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>","Model":"import {  pattern,prop,} from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({pattern:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n}\r\n"}}